version: '3.8'

services:
  # Main CodeGuardian Application
  codeguardian:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: codeguardian-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - FLASK_ENV=production
      - DJANGO_SETTINGS_MODULE=settings.production
    volumes:
      - ../src:/app/src:ro
      - ../rules:/app/rules:ro
      - ../datasets:/app/datasets:ro
      - scan_results:/app/results
      - model_cache:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - codeguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: codeguardian-db
    environment:
      POSTGRES_DB: codeguardian
      POSTGRES_USER: codeguardian
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - codeguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codeguardian"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: codeguardian-cache
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - codeguardian-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ML Model Training Service
  ml-trainer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: codeguardian-trainer
    command: python scripts/training/robust_train_ml.py
    environment:
      - PYTHONPATH=/app/src
      - MODEL_OUTPUT_DIR=/app/models
    volumes:
      - ../src:/app/src:ro
      - ../scripts:/app/scripts:ro
      - ../datasets:/app/datasets:ro
      - model_cache:/app/models
    depends_on:
      - postgres
    networks:
      - codeguardian-network
    restart: "no"
    profiles:
      - training

  # Web UI Service (if using Flask/Django web interface)
  web-ui:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: codeguardian-web
    command: python -m flask run --host=0.0.0.0 --port=5000
    ports:
      - "5000:5000"
    environment:
      - PYTHONPATH=/app/src
      - FLASK_APP=src.web.app
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://codeguardian:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/codeguardian
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    volumes:
      - ../src:/app/src:ro
      - scan_results:/app/results
    depends_on:
      - postgres
      - redis
      - codeguardian
    networks:
      - codeguardian-network
    restart: unless-stopped
    profiles:
      - web

  # Background Worker for Async Scanning
  worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: codeguardian-worker
    command: python -m celery worker -A src.engine.tasks -l info
    environment:
      - PYTHONPATH=/app/src
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - DATABASE_URL=postgresql://codeguardian:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/codeguardian
    volumes:
      - ../src:/app/src:ro
      - ../rules:/app/rules:ro
      - scan_results:/app/results
      - model_cache:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - codeguardian-network
    restart: unless-stopped
    profiles:
      - worker

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: codeguardian-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - codeguardian
      - web-ui
    networks:
      - codeguardian-network
    restart: unless-stopped
    profiles:
      - proxy

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: codeguardian-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - codeguardian-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: codeguardian-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - codeguardian-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scan_results:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  codeguardian-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
