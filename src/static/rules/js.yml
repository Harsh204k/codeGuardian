# JavaScript/TypeScript Security Rules

rules:
  - id: js_eval_usage
    name: "Use of eval()"
    cwe_id: "CWE-94"
    severity: CRITICAL
    confidence: HIGH
    type: api_call
    api_names: [eval]
    description: "eval() executes arbitrary JavaScript"
    remediation: "Avoid eval(); use JSON.parse for data"
    
  - id: js_innerhtml_xss
    name: "XSS via innerHTML"
    cwe_id: "CWE-79"
    severity: HIGH
    confidence: MEDIUM
    type: regex
    pattern: '\.innerHTML\s*='
    description: "innerHTML can execute JavaScript"
    remediation: "Use textContent or DOMPurify"
    
  - id: js_weak_crypto
    name: "Weak Cryptography"
    cwe_id: "CWE-327"
    severity: MEDIUM
    confidence: HIGH
    type: keyword
    keywords: [Math.random]
    description: "Math.random() is not cryptographically secure"
    remediation: "Use crypto.getRandomValues()"
    
  - id: js_prototype_pollution
    name: "Prototype Pollution"
    cwe_id: "CWE-1321"
    severity: MEDIUM
    confidence: LOW
    type: regex
    pattern: '\[.*(__proto__|constructor|prototype).*\]'
    description: "Potential prototype pollution"
    remediation: "Validate object properties"
    
  - id: js_insecure_storage
    name: "Sensitive Data in Local Storage"
    cwe_id: "CWE-312"
    severity: MEDIUM
    confidence: LOW
    type: regex
    pattern: 'localStorage\.setItem\s*\([^)]*password|token|secret'
    description: "Sensitive data in localStorage"
    remediation: "Use secure storage mechanisms"
