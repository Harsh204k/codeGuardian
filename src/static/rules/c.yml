# C Language Vulnerability Detection Rules
# Comprehensive rule set for C static analysis
# Phase 3.2 Enhanced Rules

version: "1.0"
language: c

rules:
  # ============================================================
  # CWE-120 / CWE-119: Buffer Overflow
  # ============================================================
  
  - id: c_strcpy_overflow
    name: "Unsafe strcpy() usage"
    cwe_id: "CWE-120"
    severity: HIGH
    confidence: 0.90
    type: api_call
    api_names:
      - strcpy
    description: "strcpy() does not check buffer bounds and can cause overflow"
    remediation: "Use strncpy() or strlcpy() with explicit size limits"
    owasp: "A03:2021 - Injection"
    tags: [buffer-overflow, string-operation, memory-safety]
    examples:
      vulnerable: |
        char dest[10];
        strcpy(dest, user_input);  // No bounds checking
      safe: |
        char dest[10];
        strncpy(dest, user_input, sizeof(dest) - 1);
        dest[sizeof(dest) - 1] = '\0';
  
  - id: c_strcat_overflow
    name: "Unsafe strcat() usage"
    cwe_id: "CWE-120"
    severity: HIGH
    confidence: 0.90
    type: api_call
    api_names:
      - strcat
    description: "strcat() can overflow destination buffer"
    remediation: "Use strncat() with proper size calculation"
    owasp: "A03:2021 - Injection"
    tags: [buffer-overflow, string-operation]
    examples:
      vulnerable: |
        char buf[20] = "Hello";
        strcat(buf, long_string);  // Can overflow
      safe: |
        char buf[20] = "Hello";
        strncat(buf, long_string, sizeof(buf) - strlen(buf) - 1);
  
  - id: c_gets_usage
    name: "Dangerous gets() function"
    cwe_id: "CWE-120"
    severity: CRITICAL
    confidence: 0.95
    type: api_call
    api_names:
      - gets
    description: "gets() has no bounds checking and is inherently unsafe"
    remediation: "Replace with fgets(buffer, size, stdin)"
    owasp: "A03:2021 - Injection"
    tags: [buffer-overflow, deprecated, input-validation]
    examples:
      vulnerable: |
        char buffer[100];
        gets(buffer);  // Extremely dangerous
      safe: |
        char buffer[100];
        fgets(buffer, sizeof(buffer), stdin);
  
  - id: c_sprintf_overflow
    name: "Unsafe sprintf() usage"
    cwe_id: "CWE-120"
    severity: HIGH
    confidence: 0.85
    type: api_call
    api_names:
      - sprintf
      - vsprintf
    description: "sprintf() does not check destination buffer size"
    remediation: "Use snprintf() or vsnprintf() with size limit"
    owasp: "A03:2021 - Injection"
    tags: [buffer-overflow, string-formatting]
    examples:
      vulnerable: |
        char buf[50];
        sprintf(buf, "Value: %d", large_num);
      safe: |
        char buf[50];
        snprintf(buf, sizeof(buf), "Value: %d", large_num);
  
  - id: c_scanf_unbounded
    name: "Unbounded scanf %s format"
    cwe_id: "CWE-120"
    severity: HIGH
    confidence: 0.80
    type: regex
    pattern: 'scanf\s*\([^)]*%s[^)]*\)'
    description: "scanf() with %s can overflow buffer without width specifier"
    remediation: "Use width specifier like %99s or use fgets()"
    owasp: "A03:2021 - Injection"
    tags: [buffer-overflow, input-validation]
    examples:
      vulnerable: |
        char name[100];
        scanf("%s", name);  // No width limit
      safe: |
        char name[100];
        scanf("%99s", name);  // Width specifier
  
  # ============================================================
  # CWE-134: Format String Vulnerability
  # ============================================================
  
  - id: c_format_string_printf
    name: "Format string vulnerability in printf"
    cwe_id: "CWE-134"
    severity: HIGH
    confidence: 0.75
    type: regex
    pattern: 'printf\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    description: "Using variable as format string without validation"
    remediation: 'Use printf("%s", variable) instead of printf(variable)'
    owasp: "A03:2021 - Injection"
    tags: [format-string, injection]
    examples:
      vulnerable: |
        char *user_input = get_input();
        printf(user_input);  // Attacker controls format string
      safe: |
        char *user_input = get_input();
        printf("%s", user_input);  // Safe
  
  - id: c_format_string_fprintf
    name: "Format string vulnerability in fprintf"
    cwe_id: "CWE-134"
    severity: HIGH
    confidence: 0.75
    type: regex
    pattern: 'fprintf\s*\(\s*\w+\s*,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    description: "Using variable as format string in fprintf"
    remediation: 'Use fprintf(file, "%s", variable)'
    owasp: "A03:2021 - Injection"
    tags: [format-string, injection]
  
  - id: c_format_string_syslog
    name: "Format string vulnerability in syslog"
    cwe_id: "CWE-134"
    severity: HIGH
    confidence: 0.80
    type: regex
    pattern: 'syslog\s*\(\s*\w+\s*,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    description: "Using variable as format string in syslog"
    remediation: 'Use syslog(priority, "%s", message)'
    owasp: "A09:2021 - Security Logging"
    tags: [format-string, logging]
  
  # ============================================================
  # CWE-190: Integer Overflow/Underflow
  # ============================================================
  
  - id: c_integer_overflow_malloc
    name: "Integer overflow in memory allocation"
    cwe_id: "CWE-190"
    severity: HIGH
    confidence: 0.65
    type: regex
    pattern: '(malloc|calloc|realloc)\s*\([^)]*[+\-*][^)]*\)'
    description: "Arithmetic in malloc size can cause integer overflow"
    remediation: "Check for overflow before allocation or use SIZE_MAX validation"
    owasp: "A04:2021 - Insecure Design"
    tags: [integer-overflow, memory-allocation]
    examples:
      vulnerable: |
        size_t size = num_items * item_size;
        void *ptr = malloc(size);  // Can overflow
      safe: |
        if (num_items > SIZE_MAX / item_size) {
            return NULL;  // Overflow would occur
        }
        void *ptr = malloc(num_items * item_size);
  
  - id: c_integer_overflow_array_index
    name: "Integer overflow in array indexing"
    cwe_id: "CWE-190"
    severity: MEDIUM
    confidence: 0.55
    type: regex
    pattern: '\[[^]]*[+\-][^]]*\]'
    description: "Unchecked arithmetic in array index can overflow"
    remediation: "Validate array indices before use"
    owasp: "A04:2021 - Insecure Design"
    tags: [integer-overflow, array-bounds]
  
  # ============================================================
  # CWE-416: Use After Free
  # ============================================================
  
  - id: c_missing_null_after_free
    name: "Pointer not set to NULL after free"
    cwe_id: "CWE-416"
    severity: MEDIUM
    confidence: 0.70
    type: regex
    pattern: 'free\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)\s*;'
    description: "Pointer should be set to NULL after free to prevent use-after-free"
    remediation: "Set pointer to NULL after calling free()"
    owasp: "A04:2021 - Insecure Design"
    tags: [use-after-free, memory-management]
    examples:
      vulnerable: |
        free(ptr);
        // ptr not set to NULL
      safe: |
        free(ptr);
        ptr = NULL;
  
  - id: c_double_free
    name: "Potential double free"
    cwe_id: "CWE-415"
    severity: HIGH
    confidence: 0.60
    type: keyword
    keywords:
      - "free"
    description: "Multiple free() calls on same pointer can cause double free"
    remediation: "Set pointer to NULL after free and check before freeing"
    owasp: "A04:2021 - Insecure Design"
    tags: [double-free, memory-management]
  
  # ============================================================
  # CWE-476: NULL Pointer Dereference
  # ============================================================
  
  - id: c_null_deref_after_malloc
    name: "Missing NULL check after malloc"
    cwe_id: "CWE-476"
    severity: MEDIUM
    confidence: 0.65
    type: regex
    pattern: '=\s*(malloc|calloc|realloc)\s*\([^)]+\)'
    description: "malloc() can return NULL, must check before dereferencing"
    remediation: "Always check if(ptr != NULL) before using allocated memory"
    owasp: "A04:2021 - Insecure Design"
    tags: [null-pointer, memory-allocation]
    examples:
      vulnerable: |
        int *ptr = malloc(sizeof(int));
        *ptr = 42;  // No NULL check
      safe: |
        int *ptr = malloc(sizeof(int));
        if (ptr != NULL) {
            *ptr = 42;
        }
  
  # ============================================================
  # CWE-78: OS Command Injection
  # ============================================================
  
  - id: c_command_injection_system
    name: "Command injection via system()"
    cwe_id: "CWE-78"
    severity: CRITICAL
    confidence: 0.85
    type: api_call
    api_names:
      - system
    description: "system() executes shell commands and is vulnerable to injection"
    remediation: "Use execve() with argument array instead of system(), sanitize inputs"
    owasp: "A03:2021 - Injection"
    tags: [command-injection, shell, dangerous-function]
    examples:
      vulnerable: |
        char cmd[256];
        sprintf(cmd, "cat %s", user_file);
        system(cmd);  // Command injection
      safe: |
        char *args[] = {"cat", user_file, NULL};
        execve("/bin/cat", args, NULL);
  
  - id: c_command_injection_popen
    name: "Command injection via popen()"
    cwe_id: "CWE-78"
    severity: HIGH
    confidence: 0.85
    type: api_call
    api_names:
      - popen
    description: "popen() creates shell process vulnerable to injection"
    remediation: "Use pipe() + fork() + execve() for safer subprocess management"
    owasp: "A03:2021 - Injection"
    tags: [command-injection, shell]
  
  - id: c_command_injection_exec
    name: "Potential command injection via exec family"
    cwe_id: "CWE-78"
    severity: HIGH
    confidence: 0.75
    type: api_call
    api_names:
      - execlp
      - execvp
    description: "exec*p() functions search PATH and can execute unintended programs"
    remediation: "Use execv() or execve() with absolute paths"
    owasp: "A03:2021 - Injection"
    tags: [command-injection, path-search]
  
  # ============================================================
  # CWE-327: Weak Cryptography
  # ============================================================
  
  - id: c_weak_crypto_des
    name: "Weak DES encryption"
    cwe_id: "CWE-327"
    severity: HIGH
    confidence: 0.90
    type: keyword
    keywords:
      - "DES_"
      - "des_"
    description: "DES is cryptographically broken and should not be used"
    remediation: "Use AES-256 or ChaCha20 for encryption"
    owasp: "A02:2021 - Cryptographic Failures"
    tags: [weak-crypto, deprecated, encryption]
    examples:
      vulnerable: |
        DES_key_schedule schedule;
        DES_ecb_encrypt(...);  // Weak
      safe: |
        EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
        EVP_EncryptInit_ex(ctx, EVP_aes_256_gcm(), ...);
  
  - id: c_weak_hash_md5
    name: "Weak MD5 hash function"
    cwe_id: "CWE-327"
    severity: MEDIUM
    confidence: 0.85
    type: keyword
    keywords:
      - "MD5"
      - "md5"
    description: "MD5 is cryptographically broken for collision resistance"
    remediation: "Use SHA-256, SHA-3, or BLAKE2 for hashing"
    owasp: "A02:2021 - Cryptographic Failures"
    tags: [weak-crypto, hash, deprecated]
  
  - id: c_weak_hash_sha1
    name: "Weak SHA-1 hash function"
    cwe_id: "CWE-327"
    severity: MEDIUM
    confidence: 0.80
    type: keyword
    keywords:
      - "SHA1"
      - "sha1"
    description: "SHA-1 is deprecated due to collision vulnerabilities"
    remediation: "Use SHA-256 or stronger hash functions"
    owasp: "A02:2021 - Cryptographic Failures"
    tags: [weak-crypto, hash, deprecated]
  
  - id: c_weak_crypto_rc4
    name: "Weak RC4 stream cipher"
    cwe_id: "CWE-327"
    severity: HIGH
    confidence: 0.90
    type: keyword
    keywords:
      - "RC4"
      - "rc4"
      - "ARCFOUR"
    description: "RC4 has multiple vulnerabilities and is deprecated"
    remediation: "Use AES-GCM or ChaCha20-Poly1305"
    owasp: "A02:2021 - Cryptographic Failures"
    tags: [weak-crypto, stream-cipher, deprecated]
  
  # ============================================================
  # CWE-22: Path Traversal
  # ============================================================
  
  - id: c_path_traversal_fopen
    name: "Path traversal in file operations"
    cwe_id: "CWE-22"
    severity: HIGH
    confidence: 0.70
    type: regex
    pattern: 'fopen\s*\([^)]*\.\.[^)]*\)'
    description: "File path with .. can traverse directories"
    remediation: "Validate and sanitize file paths, use realpath() to resolve paths"
    owasp: "A01:2021 - Broken Access Control"
    tags: [path-traversal, file-operation]
    examples:
      vulnerable: |
        char path[256];
        sprintf(path, "/data/%s", user_input);
        FILE *f = fopen(path, "r");  // user_input could be "../etc/passwd"
      safe: |
        char *safe_path = realpath(user_input, NULL);
        if (safe_path && strncmp(safe_path, "/data/", 6) == 0) {
            FILE *f = fopen(safe_path, "r");
        }
  
  # ============================================================
  # CWE-732: Incorrect Permission Assignment
  # ============================================================
  
  - id: c_insecure_file_permissions
    name: "Insecure file permissions"
    cwe_id: "CWE-732"
    severity: MEDIUM
    confidence: 0.75
    type: regex
    pattern: 'chmod\s*\([^)]*0777[^)]*\)'
    description: "File permissions 0777 allow world read/write/execute"
    remediation: "Use restrictive permissions like 0600 or 0644"
    owasp: "A01:2021 - Broken Access Control"
    tags: [permissions, access-control]
    examples:
      vulnerable: |
        chmod("secret.txt", 0777);  // World accessible
      safe: |
        chmod("secret.txt", 0600);  // Owner only
  
  # ============================================================
  # CWE-676: Use of Potentially Dangerous Function
  # ============================================================
  
  - id: c_dangerous_realpath
    name: "Unsafe realpath() without NULL"
    cwe_id: "CWE-676"
    severity: LOW
    confidence: 0.60
    type: regex
    pattern: 'realpath\s*\([^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    description: "realpath() with fixed buffer can overflow"
    remediation: "Use realpath(path, NULL) to let function allocate buffer"
    owasp: "A04:2021 - Insecure Design"
    tags: [dangerous-function, buffer-overflow]
  
  - id: c_dangerous_signal
    name: "Unsafe signal() usage"
    cwe_id: "CWE-676"
    severity: LOW
    confidence: 0.55
    type: api_call
    api_names:
      - signal
    description: "signal() behavior is inconsistent across platforms"
    remediation: "Use sigaction() instead of signal()"
    owasp: "A04:2021 - Insecure Design"
    tags: [dangerous-function, signal-handling]

# Shared rules inclusion
include_shared:
  - cwe78_cmd_exec.yml
  - cwe79_xss.yml
  - cwe89_sql_injection.yml
  - cwe22_path_traversal.yml
  - cwe327_weak_crypto.yml
  - cwe502_deserialization.yml
  - cwe798_hardcoded_creds.yml
  - cwe120_buffer_overflow.yml
