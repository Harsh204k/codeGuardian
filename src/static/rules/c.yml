# C Language Vulnerability Detection Rules
# CWE-based detection patterns for C code security issues

rules:
  # ============================================================================
  # CWE-120: Buffer Copy Without Checking Size of Input (Classic Buffer Overflow)
  # ============================================================================
  - id: CWE-120-strcpy
    cwe_id: CWE-120
    name: Unsafe strcpy Usage
    type: regex
    pattern: '\bstrcpy\s*\('
    severity: high
    confidence: 0.90
    message: "strcpy() does not check buffer bounds and can cause buffer overflow"
    remediation: "Use strncpy() or safer alternatives like strlcpy(), snprintf()"
    
  - id: CWE-120-strcat
    cwe_id: CWE-120
    name: Unsafe strcat Usage
    type: regex
    pattern: '\bstrcat\s*\('
    severity: high
    confidence: 0.90
    message: "strcat() can cause buffer overflow if destination buffer is too small"
    remediation: "Use strncat() or ensure destination buffer size is sufficient"
    
  - id: CWE-120-gets
    cwe_id: CWE-120
    name: Dangerous gets() Function
    type: regex
    pattern: '\bgets\s*\('
    severity: critical
    confidence: 0.95
    message: "gets() is inherently unsafe and should never be used"
    remediation: "Use fgets() with explicit buffer size instead"
    
  - id: CWE-120-sprintf
    cwe_id: CWE-120
    name: Unsafe sprintf Usage
    type: regex
    pattern: '\bsprintf\s*\('
    severity: high
    confidence: 0.85
    message: "sprintf() does not check buffer size and may overflow"
    remediation: "Use snprintf() with explicit buffer size"
    
  - id: CWE-120-scanf-string
    cwe_id: CWE-120
    name: Unsafe scanf with %s
    type: regex
    pattern: 'scanf\s*\(\s*[^)]*"%s'
    severity: high
    confidence: 0.90
    message: "scanf with %s can read unlimited characters causing buffer overflow"
    remediation: "Use width specifier like %99s or use fgets()"

  # ============================================================================
  # CWE-119: Improper Restriction of Operations within Bounds of Memory Buffer
  # ============================================================================
  - id: CWE-119-memcpy-unsafe
    cwe_id: CWE-119
    name: Unsafe memcpy Usage
    type: regex
    pattern: '\bmemcpy\s*\([^,]+,\s*[^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.75
    message: "memcpy with variable size may copy beyond buffer bounds"
    remediation: "Validate size parameter against destination buffer capacity"

  - id: CWE-119-memmove-unsafe
    cwe_id: CWE-119
    name: Unsafe memmove Usage
    type: regex
    pattern: '\bmemmove\s*\([^,]+,\s*[^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.75
    message: "memmove with variable size may access invalid memory"
    remediation: "Validate size parameter before calling memmove"

  # ============================================================================
  # CWE-134: Format String Vulnerability
  # ============================================================================
  - id: CWE-134-printf-var
    cwe_id: CWE-134
    name: Format String in printf
    type: regex
    pattern: 'printf\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.85
    message: "Using variable as format string in printf allows format string attacks"
    remediation: "Use printf(\"%s\", var) or validate format string"

  - id: CWE-134-fprintf-var
    cwe_id: CWE-134
    name: Format String in fprintf
    type: regex
    pattern: 'fprintf\s*\([^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.85
    message: "Using variable as format string in fprintf is dangerous"
    remediation: "Use fprintf(file, \"%s\", var) or validate input"

  - id: CWE-134-snprintf-var
    cwe_id: CWE-134
    name: Format String in snprintf
    type: regex
    pattern: 'snprintf\s*\([^,]+,\s*[^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.80
    message: "Variable format string in snprintf can be exploited"
    remediation: "Always use literal format strings or sanitize input"

  - id: CWE-134-syslog
    cwe_id: CWE-134
    name: Format String in syslog
    type: regex
    pattern: 'syslog\s*\([^,]+,\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)'
    severity: high
    confidence: 0.85
    message: "Syslog with variable format string is vulnerable"
    remediation: "Use syslog(priority, \"%s\", msg)"

  # ============================================================================
  # CWE-190: Integer Overflow or Wraparound
  # ============================================================================
  - id: CWE-190-malloc-mult
    cwe_id: CWE-190
    name: Integer Overflow in malloc
    type: regex
    pattern: 'malloc\s*\([^)]*\*[^)]*\)'
    severity: high
    confidence: 0.75
    message: "malloc with multiplication may overflow causing small allocation"
    remediation: "Check for overflow before multiplication or use calloc()"

  - id: CWE-190-alloc-mult
    cwe_id: CWE-190
    name: Integer Overflow in Memory Allocation
    type: regex
    pattern: '(malloc|calloc|realloc)\s*\([^)]*\+[^)]*\*'
    severity: high
    confidence: 0.70
    message: "Complex arithmetic in allocation size may overflow"
    remediation: "Use checked arithmetic or safe allocation wrappers"

  - id: CWE-190-array-index
    cwe_id: CWE-190
    name: Unchecked Array Index
    type: regex
    pattern: '\[[a-zA-Z_][a-zA-Z0-9_]*\s*\+\s*[a-zA-Z_][a-zA-Z0-9_]*\]'
    severity: medium
    confidence: 0.60
    message: "Array indexing with addition may overflow"
    remediation: "Validate index values before array access"

  # ============================================================================
  # CWE-416: Use After Free
  # ============================================================================
  - id: CWE-416-use-after-free
    cwe_id: CWE-416
    name: Potential Use After Free
    type: api_call
    api_names: ["free"]
    severity: critical
    confidence: 0.70
    message: "Variable may be accessed after being freed"
    remediation: "Set pointer to NULL after free() and check before use"

  # ============================================================================
  # CWE-415: Double Free
  # ============================================================================
  - id: CWE-415-double-free
    cwe_id: CWE-415
    name: Potential Double Free
    type: api_call
    api_names: ["free"]
    severity: critical
    confidence: 0.70
    message: "Pointer may be freed multiple times"
    remediation: "Set pointer to NULL after free and check before freeing"

  # ============================================================================
  # CWE-476: NULL Pointer Dereference
  # ============================================================================
  - id: CWE-476-malloc-no-check
    cwe_id: CWE-476
    name: malloc Without NULL Check
    type: regex
    pattern: '([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*malloc\s*\('
    severity: high
    confidence: 0.70
    message: "malloc result used without checking for NULL"
    remediation: "Always check if malloc returns NULL before using pointer"

  - id: CWE-476-calloc-no-check
    cwe_id: CWE-476
    name: calloc Without NULL Check
    type: regex
    pattern: '([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*calloc\s*\('
    severity: high
    confidence: 0.70
    message: "calloc result used without NULL validation"
    remediation: "Check for NULL return value before dereferencing"

  - id: CWE-476-realloc-no-check
    cwe_id: CWE-476
    name: realloc Without NULL Check
    type: regex
    pattern: '([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*realloc\s*\('
    severity: high
    confidence: 0.70
    message: "realloc may return NULL if allocation fails"
    remediation: "Check realloc return value before using"

  - id: CWE-476-fopen-no-check
    cwe_id: CWE-476
    name: fopen Without NULL Check
    type: regex
    pattern: '([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*fopen\s*\('
    severity: medium
    confidence: 0.75
    message: "fopen may return NULL if file cannot be opened"
    remediation: "Always check if fopen returns NULL"

  # ============================================================================
  # CWE-78: OS Command Injection
  # ============================================================================
  - id: CWE-78-system
    cwe_id: CWE-78
    name: Dangerous system() Call
    type: api_call
    api_names: ["system"]
    severity: critical
    confidence: 0.90
    message: "system() executes shell commands and is vulnerable to injection"
    remediation: "Use execve() family or validate/sanitize all input"

  - id: CWE-78-popen
    cwe_id: CWE-78
    name: Dangerous popen() Call
    type: api_call
    api_names: ["popen"]
    severity: critical
    confidence: 0.90
    message: "popen() is vulnerable to command injection"
    remediation: "Use pipe() + fork() + execve() or sanitize input"

  - id: CWE-78-exec-family
    cwe_id: CWE-78
    name: Exec Family Functions
    type: regex
    pattern: '\b(exec|execl|execlp|execle|execv|execvp|execvpe)\s*\('
    severity: high
    confidence: 0.85
    message: "exec family functions may be exploited with unsanitized input"
    remediation: "Validate all arguments and avoid shell interpretation"

  # ============================================================================
  # CWE-327: Use of Broken or Risky Cryptographic Algorithm
  # ============================================================================
  - id: CWE-327-des
    cwe_id: CWE-327
    name: Weak Encryption DES
    type: regex
    pattern: '\bDES_'
    severity: high
    confidence: 0.85
    message: "DES encryption is obsolete and easily broken"
    remediation: "Use AES-256 or other modern encryption algorithms"

  - id: CWE-327-md5
    cwe_id: CWE-327
    name: Weak Hash MD5
    type: regex
    pattern: '\bMD5'
    severity: medium
    confidence: 0.85
    message: "MD5 is cryptographically broken and should not be used"
    remediation: "Use SHA-256, SHA-3, or BLAKE2 for hashing"

  - id: CWE-327-sha1
    cwe_id: CWE-327
    name: Weak Hash SHA1
    type: regex
    pattern: '\bSHA1'
    severity: medium
    confidence: 0.80
    message: "SHA-1 is deprecated due to collision vulnerabilities"
    remediation: "Migrate to SHA-256 or SHA-3"

  - id: CWE-327-rc4
    cwe_id: CWE-327
    name: Weak Cipher RC4
    type: regex
    pattern: '\bRC4'
    severity: high
    confidence: 0.90
    message: "RC4 stream cipher has known vulnerabilities"
    remediation: "Use AES-GCM or ChaCha20-Poly1305"

  # ============================================================================
  # CWE-676: Use of Potentially Dangerous Function
  # ============================================================================
  - id: CWE-676-tmpnam
    cwe_id: CWE-676
    name: Insecure tmpnam()
    type: api_call
    api_names: ["tmpnam", "tempnam"]
    severity: medium
    confidence: 0.80
    message: "tmpnam creates predictable filenames vulnerable to race conditions"
    remediation: "Use mkstemp() or tmpfile() instead"

  - id: CWE-676-rand
    cwe_id: CWE-676
    name: Weak Random Number Generation
    type: api_call
    api_names: ["rand", "srand"]
    severity: medium
    confidence: 0.75
    message: "rand() is not cryptographically secure"
    remediation: "Use /dev/urandom or getrandom() for security purposes"

  # ============================================================================
  # CWE-362: Race Condition
  # ============================================================================
  - id: CWE-362-access-open
    cwe_id: CWE-362
    name: TOCTOU Race Condition
    type: regex
    pattern: 'access\s*\([^)]+\).*\n.*open\s*\('
    severity: medium
    confidence: 0.65
    message: "access() followed by open() creates TOCTOU race condition"
    remediation: "Use open() directly and check errno"

  # ============================================================================
  # CWE-787: Out-of-bounds Write
  # ============================================================================
  - id: CWE-787-array-write
    cwe_id: CWE-787
    name: Potential Out-of-Bounds Write
    type: regex
    pattern: '\[[a-zA-Z_][a-zA-Z0-9_]*\]\s*='
    severity: medium
    confidence: 0.50
    message: "Array write without bounds checking may overflow"
    remediation: "Validate array index before write operation"

  # ============================================================================
  # CWE-252: Unchecked Return Value
  # ============================================================================
  - id: CWE-252-scanf-unchecked
    cwe_id: CWE-252
    name: Unchecked scanf Return
    type: regex
    pattern: '^\s*scanf\s*\('
    severity: low
    confidence: 0.60
    message: "scanf return value not checked"
    remediation: "Check scanf return value to ensure input was read"

  - id: CWE-252-fread-unchecked
    cwe_id: CWE-252
    name: Unchecked fread Return
    type: regex
    pattern: '^\s*fread\s*\('
    severity: low
    confidence: 0.60
    message: "fread return value not checked"
    remediation: "Verify fread return value matches expected read size"

  # ============================================================================
  # CWE-311: Missing Encryption of Sensitive Data
  # ============================================================================
  - id: CWE-311-plain-password
    cwe_id: CWE-311
    name: Password in Plaintext
    type: keyword
    keywords: ["password", "passwd", "pwd"]
    severity: medium
    confidence: 0.70
    message: "Potential plaintext password storage or transmission"
    remediation: "Hash passwords with bcrypt, scrypt, or Argon2"

metadata:
  language: C
  version: "1.0"
  updated: "2025-10-08"
  total_rules: 40
  coverage:
    - CWE-120  # Buffer Copy Without Checking Size
    - CWE-119  # Improper Memory Buffer Operations
    - CWE-134  # Format String Vulnerability
    - CWE-190  # Integer Overflow
    - CWE-416  # Use After Free
    - CWE-415  # Double Free
    - CWE-476  # NULL Pointer Dereference
    - CWE-78   # OS Command Injection
    - CWE-327  # Weak Cryptography
    - CWE-676  # Dangerous Functions
    - CWE-362  # Race Condition
    - CWE-787  # Out-of-bounds Write
    - CWE-252  # Unchecked Return Value
    - CWE-311  # Missing Encryption
