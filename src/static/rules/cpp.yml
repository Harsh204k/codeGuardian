# C/C++ Specific Security Rules

rules:
  - id: cpp_dangerous_functions
    name: "Use of Dangerous C Functions"
    cwe_id: "CWE-120"
    severity: HIGH
    confidence: HIGH
    type: api_call
    api_names: [gets, strcpy, strcat, sprintf, vsprintf]
    description: "Unsafe C string functions prone to buffer overflow"
    remediation: "Use safe alternatives: fgets, strncpy, strncat, snprintf"
    
  - id: cpp_memory_leak
    name: "Potential Memory Leak"
    cwe_id: "CWE-401"
    severity: MEDIUM
    confidence: LOW
    type: regex
    pattern: '\w+\s*=\s*(malloc|calloc|realloc)\s*\([^;]+;(?!.*free\s*\(\s*\w+\s*\))'
    description: "Memory allocation without corresponding free"
    remediation: "Ensure allocated memory is freed"
    
  - id: cpp_double_free
    name: "Potential Double Free"
    cwe_id: "CWE-415"
    severity: HIGH
    confidence: LOW
    type: regex
    pattern: 'free\s*\(\s*(\w+)\s*\)[^}]*free\s*\(\s*\1\s*\)'
    description: "Same pointer freed multiple times"
    remediation: "Set pointer to NULL after free"
    
  - id: cpp_integer_overflow
    name: "Integer Overflow in Allocation"
    cwe_id: "CWE-190"
    severity: MEDIUM
    confidence: MEDIUM
    type: regex
    pattern: '(malloc|calloc|realloc)\s*\([^)]*[\*\+][^)]*\)'
    description: "Arithmetic in memory allocation can overflow"
    remediation: "Validate size before allocation"
    
  - id: cpp_format_string
    name: "Format String Vulnerability"
    cwe_id: "CWE-134"
    severity: HIGH
    confidence: MEDIUM
    type: regex
    pattern: '(printf|fprintf|sprintf|snprintf|syslog)\s*\(\s*\w+\s*\)'
    description: "Variable used as format string"
    remediation: "Use string literal as format: printf(\"%s\", var)"
    
  - id: cpp_unchecked_return
    name: "Unchecked Return Value"
    cwe_id: "CWE-252"
    severity: LOW
    confidence: LOW
    type: regex
    pattern: '^\s*(malloc|calloc|realloc|fopen)\s*\([^;]+;\s*$'
    description: "Return value not checked for errors"
    remediation: "Check for NULL return value"
    
  - id: cpp_null_pointer_deref
    name: "Null Pointer Dereference"
    cwe_id: "CWE-476"
    severity: MEDIUM
    confidence: LOW
    type: regex
    pattern: '\*\s*\w+\s*(?!.*if.*NULL)'
    description: "Pointer dereferenced without null check"
    remediation: "Check pointer for NULL before dereferencing"
    
  - id: cpp_use_after_free
    name: "Use After Free"
    cwe_id: "CWE-416"
    severity: HIGH
    confidence: LOW
    type: regex
    pattern: 'free\s*\(\s*(\w+)\s*\)[^}]*\*\s*\1'
    description: "Pointer used after being freed"
    remediation: "Set pointer to NULL after free"
