#!/usr/bin/env python3
"""
COMPREHENSIVE FIXED: Unified Dual-Output CodeBERT Training Script for Vulnerability Detection
============================================================================================

ALL COMPREHENSIVE FIXES APPLIED:
- ✅ TrainingArguments with modern evaluation strategy (no deprecated parameters)
- ✅ Proper dataset preprocessing with label validation  
- ✅ Correct tokenization and padding configuration (padding="longest")
- ✅ Robust error handling and logging throughout
- ✅ Enhanced data collator with batched warning suppression
- ✅ CPU optimizations: Gradient checkpointing, thread control, memory efficiency
- ✅ GPU optimizations: FP16, larger batches, CUDA acceleration
- ✅ HuggingFace compatibility with version-agnostic parameter filtering
- ✅ SequenceClassifierOutput implementation for model compatibility
- ✅ Conditional callback configuration based on evaluation strategy

Key Features:
- Device flexibility: Choose CPU or GPU with --device flag
- Enhanced small dataset processing: Optimized for CPU with quick testing modes
- Enhanced progress tracking, TensorBoard logging, validation assertions
- Hackathon-ready with multiple quick testing options
- ALL training issues from both CPU and reference scripts resolved
"""

import json
import torch
import torch.nn as nn
import numpy as np
import pandas as pd
from pathlib import Path
import os
import re
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from transformers import (
    AutoTokenizer,
    AutoModel,
    PreTrainedModel,
    PretrainedConfig,
    TrainingArguments,
    Trainer,
    EarlyStoppingCallback,
    DataCollatorWithPadding,
)
from transformers.modeling_outputs import SequenceClassifierOutput
from datasets import Dataset
import logging
from typing import List, Dict, Tuple, Optional, Iterator, Union
import pickle
import warnings
import shutil
import inspect
from tqdm import tqdm

# Optional imports for enhanced features
try:
    from accelerate import Accelerator

    ACCELERATE_AVAILABLE = True
except ImportError:
    ACCELERATE_AVAILABLE = False
    print("Warning: accelerate not available. Install with: pip install accelerate")

try:
    from torch.utils.tensorboard import SummaryWriter

    TENSORBOARD_AVAILABLE = True
except ImportError:
    TENSORBOARD_AVAILABLE = False
    print("Warning: tensorboard not available. Install with: pip install tensorboard")

warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings(
    "ignore",
    message="Token indices sequence length is longer than the specified maximum sequence length",
)

# Suppress specific tokenizer warnings
transformers_logger = logging.getLogger("transformers.tokenization_utils_base")
transformers_logger.setLevel(logging.ERROR)

# ----------------------
# Logging Configuration
# ----------------------
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


# ----------------------
# Configuration Class
# ----------------------
class DualOutputCodeBERTConfig(PretrainedConfig):
    """Configuration class for DualOutputCodeBERT model"""

    model_type = "dual_output_codebert"

    def __init__(
        self,
        base_model_name: str = "microsoft/codebert-base",
        num_cwes: int = 100,
        dropout_rate: float = 0.1,
        binary_weight: float = 1.0,
        cwe_weight: float = 1.0,
        use_gradient_checkpointing: bool = False,  # Set based on device
        **kwargs,
    ):
        super().__init__(**kwargs)
        self.base_model_name = base_model_name
        self.num_cwes = num_cwes
        self.dropout_rate = dropout_rate
        self.binary_weight = binary_weight
        self.cwe_weight = cwe_weight
        self.use_gradient_checkpointing = use_gradient_checkpointing


# ----------------------
# Unified Model Architecture
# ----------------------
class DualOutputCodeBERTModel(PreTrainedModel):
    """
    Unified CodeBERT model with dual outputs, optimized for CPU/GPU
    """

    config_class = DualOutputCodeBERTConfig

    def __init__(self, config: DualOutputCodeBERTConfig):
        super().__init__(config)
        self.config = config

        # Load CodeBERT backbone
        self.backbone = AutoModel.from_pretrained(config.base_model_name)
        hidden_size = self.backbone.config.hidden_size

        # Enable gradient checkpointing if requested (CPU optimization)
        if config.use_gradient_checkpointing:
            self.backbone.gradient_checkpointing_enable()
            logger.info("Gradient checkpointing enabled for memory efficiency")

        # Dropout for regularization
        self.dropout = nn.Dropout(config.dropout_rate)

        # Binary classification head
        self.binary_classifier = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(config.dropout_rate),
            nn.Linear(hidden_size // 2, 1),
        )

        # Multi-CWE classification head
        self.cwe_classifier = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(config.dropout_rate),
            nn.Linear(hidden_size // 2, config.num_cwes),
        )

        # Loss weights
        self.binary_weight = config.binary_weight
        self.cwe_weight = config.cwe_weight

    def forward(
        self,
        input_ids: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        binary_labels: Optional[torch.Tensor] = None,
        cwe_labels: Optional[torch.Tensor] = None,
        return_dict: Optional[bool] = None,
        **kwargs,
    ):
        return_dict = (
            return_dict if return_dict is not None else self.config.use_return_dict
        )

        # Get backbone outputs
        outputs = self.backbone(
            input_ids=input_ids, attention_mask=attention_mask, return_dict=True
        )

        # Robust pooling: fallback if pooler_output is None
        pooled_output = (
            outputs.pooler_output
            if getattr(outputs, "pooler_output", None) is not None
            else outputs.last_hidden_state[:, 0, :]
        )
        pooled_output = self.dropout(pooled_output)

        # Binary classification
        binary_logits = self.binary_classifier(pooled_output)

        # Multi-CWE classification
        cwe_logits = self.cwe_classifier(pooled_output)

        loss = None
        if binary_labels is not None and cwe_labels is not None:
            # Binary classification loss
            binary_loss_fn = nn.BCEWithLogitsLoss()
            binary_loss = binary_loss_fn(
                binary_logits.squeeze(-1), binary_labels.float()
            )

            # Multi-CWE classification loss
            cwe_loss_fn = nn.BCEWithLogitsLoss()
            cwe_loss = cwe_loss_fn(cwe_logits, cwe_labels.float())

            # Weighted combined loss
            loss = self.binary_weight * binary_loss + self.cwe_weight * cwe_loss

        # For HuggingFace Trainer compatibility, we need to return logits in a standard format
        # Concatenate binary and CWE logits
        logits = torch.cat([binary_logits, cwe_logits], dim=1)

        if not return_dict:
            output = (logits,) + outputs[2:]
            return ((loss,) + output) if loss is not None else output

        # Return proper HF ModelOutput for better compatibility
        output = SequenceClassifierOutput(
            loss=loss,
            logits=logits,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )

        # Add custom attributes for backward compatibility
        output.binary_logits = binary_logits
        output.cwe_logits = cwe_logits

        return output


# ----------------------
# Enhanced Data Processing with Progress Tracking
# ----------------------
class UnifiedDataProcessor:
    """
    Unified data processor with enhanced progress tracking and validation
    """

    def __init__(
        self,
        zenodo_path: str = "datasets/zenodo",
        juliet_path: str = "datasets/juliet",
        diverse_path: str = "datasets/diversevul/diversevul.json",
        model_name: str = "microsoft/codebert-base",
        max_length: int = 512,
        min_tokens: int = 50,
        chunk_size: int = 256,  # For overlapping chunks
    ):
        self.zenodo_path = Path(zenodo_path)
        self.juliet_path = Path(juliet_path)
        self.diverse_path = Path(diverse_path)
        self.max_length = max_length
        self.min_tokens = min_tokens
        self.chunk_size = chunk_size

        # Initialize tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token

        # CWE mapping
        self.cwe_to_idx = {}
        self.idx_to_cwe = {}

        logger.info(f"Initialized unified processor with {model_name}")

    def chunk_code(
        self, code: str, cwes: List[str], binary_label: int, metadata: Dict
    ) -> List[Dict]:
        """
        Split long code into overlapping chunks instead of truncating
        """
        # First, encode without special tokens to get content length
        content_tokens = self.tokenizer.encode(code, add_special_tokens=False)

        # Account for special tokens (typically 2: [CLS] and [SEP])
        max_content_length = self.max_length - 2

        # If within limit, return single chunk
        if len(content_tokens) <= max_content_length:
            return [
                {
                    "code": code,
                    "binary_label": binary_label,
                    "cwes": cwes,
                    "chunk_id": 0,
                    **metadata,
                }
            ]

        # For long code, create overlapping chunks
        chunks = []
        step = self.chunk_size
        min_content_tokens = max(self.min_tokens - 2, 10)  # Account for special tokens

        for i in range(0, len(content_tokens), step):
            # Take chunk ensuring we don't exceed max length with special tokens
            chunk_tokens = content_tokens[i : i + max_content_length]

            if len(chunk_tokens) < min_content_tokens:
                break

            # Decode chunk back to text
            try:
                chunk_code = self.tokenizer.decode(
                    chunk_tokens, skip_special_tokens=True
                )

                # Validate the chunk can be properly tokenized within limits
                validation_tokens = self.tokenizer.encode(
                    chunk_code, add_special_tokens=True
                )
                if len(validation_tokens) > self.max_length:
                    # If still too long, truncate further
                    chunk_tokens = chunk_tokens[
                        : max_content_length - 10
                    ]  # Extra safety margin
                    chunk_code = self.tokenizer.decode(
                        chunk_tokens, skip_special_tokens=True
                    )

                chunks.append(
                    {
                        "code": chunk_code,
                        "binary_label": binary_label,
                        "cwes": cwes,
                        "chunk_id": len(chunks),
                        **metadata,
                    }
                )
            except Exception as e:
                logger.debug(f"Error processing chunk: {e}")
                continue

        # If no valid chunks were created, create a single truncated chunk
        if not chunks:
            truncated_tokens = content_tokens[: self.max_length]
            truncated_code = self.tokenizer.decode(
                truncated_tokens, skip_special_tokens=True
            )
            return [
                {
                    "code": truncated_code,
                    "binary_label": binary_label,
                    "cwes": cwes,
                    "chunk_id": 0,
                    **metadata,
                }
            ]

        return chunks

    def diversevul_generator(self, max_samples: Optional[int] = None) -> Iterator[Dict]:
        """Generator for DiverseVul dataset - lazy loading with progress"""
        if not self.diverse_path.exists():
            logger.warning(f"DiverseVul path {self.diverse_path} not found")
            return

        logger.info(f"Loading DiverseVul dataset from {self.diverse_path}")

        # Count total lines for progress bar
        total_lines = sum(1 for _ in open(self.diverse_path, "r", encoding="utf-8"))

        with open(self.diverse_path, "r", encoding="utf-8") as f:
            pbar = tqdm(
                f, total=total_lines, desc="Processing DiverseVul", unit="samples"
            )
            for i, line in enumerate(pbar):
                if max_samples and i >= max_samples:
                    break

                line = line.strip()
                if not line:
                    continue

                try:
                    item = json.loads(line)
                    code = item.get("func", "")

                    # Skip very short code
                    if len(code.strip()) < 20:
                        continue

                    # Skip extremely long code to avoid tokenization warnings
                    # Rough heuristic: 1 token ≈ 4 characters
                    if len(code) > self.max_length * 8:  # ~4096 chars for 512 tokens
                        # Truncate extremely long code
                        code = code[: self.max_length * 4]  # ~2048 chars

                    # Process CWEs
                    cwes = item.get("cwe", [])
                    if isinstance(cwes, str):
                        cwes = [cwes] if cwes else []

                    metadata = {
                        "language": item.get("language", "unknown"),
                        "project": item.get("project", ""),
                        "source": "diversevul",
                    }

                    # Chunk if necessary
                    chunks = self.chunk_code(
                        code, cwes, int(item.get("target", 0)), metadata
                    )

                    for chunk in chunks:
                        yield chunk

                except json.JSONDecodeError as e:
                    logger.debug(f"JSON decode error on line {i}: {e}")
                    continue

    def zenodo_generator(self) -> Iterator[Dict]:
        """Generator for Zenodo datasets - lazy loading with progress"""
        if not self.zenodo_path.exists():
            logger.warning(f"Zenodo path {self.zenodo_path} not found")
            return

        csv_files = list(self.zenodo_path.glob("data_*.csv"))

        for csv_file in tqdm(csv_files, desc="Processing Zenodo files"):
            logger.info(f"Processing Zenodo file: {csv_file}")

            try:
                # Read in chunks to save memory
                for chunk_df in pd.read_csv(csv_file, chunksize=1000):
                    language = csv_file.stem.split("_")[-1].lower()

                    for _, row in chunk_df.iterrows():
                        code = str(row.get("vul_code", ""))

                        if len(code.split()) < 10:  # Quick check
                            continue

                        # Skip extremely long code to avoid tokenization warnings
                        if (
                            len(code) > self.max_length * 8
                        ):  # ~4096 chars for 512 tokens
                            code = code[: self.max_length * 4]  # ~2048 chars

                        # Process CWE
                        cwe_id = str(row.get("cwe_id", "")).strip()
                        cwes = [cwe_id] if cwe_id and cwe_id.lower() != "nan" else []

                        metadata = {
                            "language": language,
                            "project": str(row.get("repo_owner", "")),
                            "source": "zenodo",
                        }

                        chunks = self.chunk_code(
                            code,
                            cwes,
                            1 if row.get("is_vulnerable", False) else 0,
                            metadata,
                        )

                        for chunk in chunks:
                            yield chunk

            except Exception as e:
                logger.error(f"Error loading {csv_file}: {e}")

    def juliet_generator(self) -> Iterator[Dict]:
        """Generator for Juliet datasets - lazy loading with progress"""
        if not self.juliet_path.exists():
            logger.warning(f"Juliet path {self.juliet_path} not found")
            return

        language_map = {
            "Java": ("java", [".java"]),
            "Cpp": ("cpp", [".cpp", ".c", ".cc"]),
            "Csharp": ("csharp", [".cs"]),
        }

        for lang_dir, (lang_name, extensions) in language_map.items():
            lang_path = self.juliet_path / lang_dir
            if not lang_path.exists():
                continue

            logger.info(f"Processing Juliet {lang_name} from {lang_path}")

            # Look for testcases
            for testcases_path in [lang_path / "src" / "testcases", lang_path]:
                if testcases_path.exists():
                    cwe_dirs = [
                        d
                        for d in testcases_path.iterdir()
                        if d.is_dir() and d.name.startswith("CWE")
                    ]

                    for cwe_dir in tqdm(cwe_dirs, desc=f"Processing {lang_name} CWEs"):
                        cwe_id = cwe_dir.name.split("_")[0]

                        for file_path in cwe_dir.rglob("*"):
                            if file_path.is_file() and file_path.suffix in extensions:
                                try:
                                    with open(
                                        file_path,
                                        "r",
                                        encoding="utf-8",
                                        errors="ignore",
                                    ) as f:
                                        code = f.read()

                                    if len(code.split()) < 10:
                                        continue

                                    # Skip extremely long code to avoid tokenization warnings
                                    if (
                                        len(code) > self.max_length * 8
                                    ):  # ~4096 chars for 512 tokens
                                        code = code[
                                            : self.max_length * 4
                                        ]  # ~2048 chars

                                    is_vulnerable = self._is_juliet_file_vulnerable(
                                        file_path.name
                                    )

                                    metadata = {
                                        "language": lang_name,
                                        "project": "juliet",
                                        "source": "juliet",
                                    }

                                    chunks = self.chunk_code(
                                        code,
                                        [cwe_id],
                                        1 if is_vulnerable else 0,
                                        metadata,
                                    )

                                    for chunk in chunks:
                                        yield chunk

                                except Exception as e:
                                    logger.debug(f"Error processing {file_path}: {e}")

    def _is_juliet_file_vulnerable(self, filename: str) -> bool:
        """Determine if Juliet file is vulnerable based on naming convention"""
        filename_lower = filename.lower()

        if "_bad" in filename_lower or "bad" in filename_lower:
            return True
        elif "_good" in filename_lower or "good" in filename_lower:
            return False
        elif "_base" in filename_lower or "base" in filename_lower:
            return True
        else:
            return True

    def build_cwe_mapping(self, dataset: Dataset) -> Dict[str, int]:
        """Build CWE mapping from dataset"""
        logger.info("Building CWE mapping from dataset...")

        all_cwes = set()

        # Sample a subset to build mapping efficiently
        sample_size = min(10000, len(dataset))
        sample_indices = np.random.choice(len(dataset), sample_size, replace=False)

        for idx in tqdm(sample_indices, desc="Building CWE mapping"):
            cwes = dataset[int(idx)]["cwes"]
            for cwe in cwes:
                if cwe and cwe.strip():
                    cwe_normalized = cwe.strip()
                    if not cwe_normalized.startswith("CWE-"):
                        if cwe_normalized.isdigit():
                            cwe_normalized = f"CWE-{cwe_normalized}"
                    all_cwes.add(cwe_normalized)

        # Sort for consistent ordering
        sorted_cwes = sorted(list(all_cwes))

        self.cwe_to_idx = {cwe: idx for idx, cwe in enumerate(sorted_cwes)}
        self.idx_to_cwe = {idx: cwe for cwe, idx in self.cwe_to_idx.items()}

        logger.info(f"Built CWE mapping with {len(self.cwe_to_idx)} unique CWEs")
        logger.info(f"Sample CWEs: {list(sorted_cwes[:10])}")

        return self.cwe_to_idx

    def create_combined_dataset(
        self,
        max_samples_per_source: Optional[int] = None,
        balance_binary: bool = True,
        max_per_class: int = 15000,
        cache_dir: str = "cache/processed_datasets",
        force_reload: bool = False,
    ) -> Dataset:
        """Create combined dataset using generators for memory efficiency with enhanced caching"""

        # Create cache directory
        cache_path = Path(cache_dir)
        cache_path.mkdir(parents=True, exist_ok=True)

        # Generate cache filename based on parameters
        cache_filename = f"combined_dataset_{max_samples_per_source}_{max_per_class}_{balance_binary}.arrow"
        dataset_cache_path = cache_path / cache_filename
        cwe_mapping_cache_path = (
            cache_path / f"cwe_mapping_{max_samples_per_source}_{max_per_class}.pkl"
        )

        # Handle directory/file conflict for cache
        if dataset_cache_path.exists() and dataset_cache_path.is_dir():
            logger.warning(
                f"Cache path {dataset_cache_path} is a directory, removing it..."
            )
            shutil.rmtree(dataset_cache_path)

        # Try to load from cache first
        if (
            not force_reload
            and dataset_cache_path.exists()
            and cwe_mapping_cache_path.exists()
        ):
            logger.info(f"Loading cached dataset from {dataset_cache_path}")
            try:
                dataset = Dataset.load_from_disk(str(dataset_cache_path))

                # Load cached CWE mapping
                with open(cwe_mapping_cache_path, "rb") as f:
                    mapping_data = pickle.load(f)
                    self.cwe_to_idx = mapping_data["cwe_to_idx"]
                    self.idx_to_cwe = mapping_data["idx_to_cwe"]

                logger.info(
                    f"Successfully loaded cached dataset with {len(dataset)} samples"
                )
                logger.info(
                    f"Loaded CWE mapping with {len(self.cwe_to_idx)} unique CWEs"
                )

                # Validation assertion for cached dataset
                assert (
                    len(self.cwe_to_idx) > 0
                ), "CWE mapping is empty after loading from cache"
                logger.info("✓ Cache validation passed")

                return dataset

            except Exception as e:
                logger.warning(f"Failed to load cached dataset: {e}")
                logger.info("Proceeding to regenerate dataset...")

        logger.info("Creating combined dataset from scratch...")

        def combined_generator():
            # Combine all generators
            generators = [
                ("DiverseVul", self.diversevul_generator(max_samples_per_source)),
                ("Zenodo", self.zenodo_generator()),
                ("Juliet", self.juliet_generator()),
            ]

            total_samples = 0
            for name, gen in generators:
                logger.info(f"Processing {name} dataset...")
                samples_from_source = 0
                try:
                    for item in gen:
                        yield item
                        samples_from_source += 1
                        total_samples += 1

                        if samples_from_source % 1000 == 0:
                            logger.info(
                                f"  {name}: {samples_from_source} samples processed"
                            )

                except Exception as e:
                    logger.error(f"Error in {name} generator: {e}")
                    continue

                logger.info(f"✓ {name}: {samples_from_source} samples total")

            logger.info(f"✓ Combined total: {total_samples} samples")

        # Create dataset from generator with error handling
        try:
            logger.info("Creating dataset from generators...")
            dataset = Dataset.from_generator(combined_generator)
        except Exception as e:
            logger.error(f"Failed to create dataset: {e}")
            # Try with single process to avoid multiprocessing issues
            logger.info("Retrying with single process...")
            dataset = Dataset.from_generator(
                combined_generator, num_proc=1  # Disable multiprocessing
            )

        if len(dataset) == 0:
            raise ValueError("No data loaded! Please check dataset paths.")

        logger.info(f"Combined dataset size: {len(dataset)}")

        # Validate dataset structure
        sample = dataset[0]
        required_keys = ["code", "binary_label", "cwes"]
        missing_keys = [key for key in required_keys if key not in sample]
        if missing_keys:
            raise ValueError(f"Dataset missing required keys: {missing_keys}")

        logger.info(f"Dataset validation passed. Sample keys: {list(sample.keys())}")

        # Build CWE mapping
        self.build_cwe_mapping(dataset)

        # Validation assertion for CWE mapping
        assert len(self.cwe_to_idx) > 0, "CWE mapping is empty after building"
        logger.info(f"✓ CWE mapping validation passed: {len(self.cwe_to_idx)} CWEs")

        # Add CWE indices for efficient processing
        def add_cwe_indices(example):
            indices = []
            for cwe in example["cwes"]:
                if cwe and cwe.strip():
                    cwe_normalized = cwe.strip()
                    if not cwe_normalized.startswith("CWE-"):
                        if cwe_normalized.isdigit():
                            cwe_normalized = f"CWE-{cwe_normalized}"
                    if cwe_normalized in self.cwe_to_idx:
                        indices.append(self.cwe_to_idx[cwe_normalized])
            example["cwe_indices"] = indices
            return example

        logger.info("Adding CWE indices to dataset...")
        dataset = dataset.map(
            add_cwe_indices, num_proc=1  # Use single proc to avoid issues
        )  # Use single proc to avoid issues

        # Balance dataset if requested
        if balance_binary:
            dataset = self._balance_dataset(dataset, max_per_class)

        # Handle directory/file conflict before saving cache
        if dataset_cache_path.exists() and dataset_cache_path.is_dir():
            logger.warning(
                f"Cache path {dataset_cache_path} is a directory, removing it before saving..."
            )
            shutil.rmtree(dataset_cache_path)

        # Cache the processed dataset
        try:
            logger.info(f"Caching processed dataset to {dataset_cache_path}")
            dataset.save_to_disk(str(dataset_cache_path))

            # Cache CWE mapping
            mapping_data = {
                "cwe_to_idx": self.cwe_to_idx,
                "idx_to_cwe": self.idx_to_cwe,
            }
            with open(cwe_mapping_cache_path, "wb") as f:
                pickle.dump(mapping_data, f)

            logger.info("Successfully cached dataset and CWE mapping")

        except Exception as e:
            logger.warning(f"Failed to cache dataset: {e}")

        return dataset

    def _balance_dataset(self, dataset: Dataset, max_per_class: int) -> Dataset:
        """Balance dataset for binary classification"""
        logger.info(f"Balancing dataset with max {max_per_class} samples per class...")

        # Split by binary label
        vulnerable_indices = [
            i for i, label in enumerate(dataset["binary_label"]) if label == 1
        ]
        safe_indices = [
            i for i, label in enumerate(dataset["binary_label"]) if label == 0
        ]

        # Sample from each class
        np.random.shuffle(vulnerable_indices)
        np.random.shuffle(safe_indices)

        vulnerable_sample = vulnerable_indices[
            : min(max_per_class, len(vulnerable_indices))
        ]
        safe_sample = safe_indices[: min(max_per_class, len(safe_indices))]

        # Combine and shuffle
        balanced_indices = vulnerable_sample + safe_sample
        np.random.shuffle(balanced_indices)

        balanced_dataset = dataset.select(balanced_indices)

        logger.info(
            f"Balanced dataset: {len(vulnerable_sample)} vulnerable, {len(safe_sample)} safe"
        )
        return balanced_dataset

    def save_cwe_mapping(self, save_path: str):
        """Save CWE mapping for inference"""
        mapping_data = {
            "cwe_to_idx": self.cwe_to_idx,
            "idx_to_cwe": self.idx_to_cwe,
            "num_cwes": len(self.cwe_to_idx),
        }

        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        with open(save_path, "wb") as f:
            pickle.dump(mapping_data, f)

        logger.info(f"CWE mapping saved to {save_path}")


# ----------------------
# Unified Training Pipeline
# ----------------------
class UnifiedTrainer:
    """Unified trainer with CPU/GPU optimizations and enhanced monitoring"""

    def __init__(
        self,
        model_name: str = "microsoft/codebert-base",
        max_length: int = 512,
        device: str = "auto",  # 'auto', 'cpu', or 'cuda'
        use_tensorboard: bool = True,
    ):
        self.device = self._resolve_device(device)
        self.model_name = model_name
        self.max_length = max_length
        self.use_tensorboard = use_tensorboard and TENSORBOARD_AVAILABLE

        # COMPREHENSIVE FIX: Initialize tokenizer with proper configuration
        logger.info(f"🔧 Loading tokenizer from {model_name}...")
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token
            logger.info("✅ Set pad_token to eos_token")

        # FIXED: Initialize data collator with proper padding configuration (from fix_training_issues.py)
        self.data_collator = DataCollatorWithPadding(
            tokenizer=self.tokenizer,
            padding="longest",  # FIXED: Use "longest" to avoid max_length warnings
            max_length=max_length,
            return_tensors="pt",
        )
        logger.info("✅ Enhanced DataCollator configured with 'longest' padding")

        logger.info(f"Initialized unified trainer on device: {self.device}")
        if self.use_tensorboard:
            logger.info("TensorBoard logging enabled")

    def _resolve_device(self, device: str) -> str:
        """Resolve device string to actual device"""
        if device == "auto":
            return "cuda" if torch.cuda.is_available() else "cpu"
        elif device == "cuda" and not torch.cuda.is_available():
            logger.warning("CUDA requested but not available. Falling back to CPU.")
            return "cpu"
        return device

    def tokenize_function(self, examples):
        """FIXED: Optimized tokenization with proper configuration (from fix_training_issues.py)"""
        return self.tokenizer(
            examples["code"],
            truncation=True,
            padding=False,  # FIXED: Let DataCollator handle dynamic padding
            max_length=self.max_length,
            add_special_tokens=True,  # FIXED: Ensure special tokens are added
            return_tensors=None,  # Let the trainer handle tensor conversion
        )

    def prepare_datasets(
        self, dataset: Dataset, num_cwes: int
    ) -> Tuple[Dataset, Dataset]:
        """Prepare optimized training and validation datasets"""
        logger.info("Preparing datasets with optimizations...")

        self.num_cwes = num_cwes

        # Validation assertion
        assert num_cwes > 0, f"Invalid num_cwes: {num_cwes}"
        logger.info(f"✓ num_cwes validation passed: {num_cwes}")

        # Split dataset - convert to list for sklearn stratification
        labels = []
        for i in tqdm(range(len(dataset)), desc="Extracting labels for stratification"):
            labels.append(dataset[i]["binary_label"])

        # Use sklearn for stratified split
        train_indices, val_indices = train_test_split(
            range(len(dataset)), test_size=0.2, random_state=42, stratify=labels
        )

        train_dataset = dataset.select(train_indices)
        val_dataset = dataset.select(val_indices)

        # Tokenize datasets
        logger.info("Tokenizing training dataset...")
        train_dataset = train_dataset.map(
            self.tokenize_function,
            batched=True,
            num_proc=1,  # Use single proc to avoid issues
            remove_columns=["code"],  # Remove raw text to save memory
            desc="Tokenizing train",
        )

        logger.info("Tokenizing validation dataset...")
        val_dataset = val_dataset.map(
            self.tokenize_function,
            batched=True,
            num_proc=1,
            remove_columns=["code"],
            desc="Tokenizing val",
        )

        # Add CWE labels on-the-fly
        def add_cwe_labels_single(example):
            vector = [0] * num_cwes
            for idx in example["cwe_indices"]:
                if 0 <= idx < num_cwes:
                    vector[idx] = 1
            example["cwe_labels"] = vector
            return example

        logger.info("Adding CWE labels to training dataset...")
        train_dataset = train_dataset.map(
            add_cwe_labels_single, num_proc=1, desc="CWE labels train"
        )

        logger.info("Adding CWE labels to validation dataset...")
        val_dataset = val_dataset.map(
            add_cwe_labels_single, num_proc=1, desc="CWE labels val"
        )

        # Set format for PyTorch
        train_dataset.set_format(
            type="torch",
            columns=["input_ids", "attention_mask", "binary_label", "cwe_labels"],
        )
        val_dataset.set_format(
            type="torch",
            columns=["input_ids", "attention_mask", "binary_label", "cwe_labels"],
        )

        logger.info(f"✓ Training dataset size: {len(train_dataset)}")
        logger.info(f"✓ Validation dataset size: {len(val_dataset)}")

        return train_dataset, val_dataset

    def compute_metrics(self, eval_pred):
        """FINAL FIXED: Enhanced robust metrics computation with comprehensive array handling"""
        predictions, labels = eval_pred

        # COMPREHENSIVE FIX: Handle inhomogeneous arrays safely
        try:
            # First try to convert predictions
            if isinstance(predictions, (list, tuple)):
                # Handle list of arrays with different shapes
                max_cols = max(len(p) if hasattr(p, '__len__') else 1 for p in predictions)
                preds = np.zeros((len(predictions), max_cols))
                for i, p in enumerate(predictions):
                    if hasattr(p, '__len__'):
                        preds[i, :len(p)] = p[:max_cols]  # Truncate if too long
                    else:
                        preds[i, 0] = p
            else:
                preds = np.asarray(predictions)
                
            # Handle labels similarly  
            if isinstance(labels, (list, tuple)):
                # Check if labels are inhomogeneous
                try:
                    labels_array = np.asarray(labels)
                    if labels_array.dtype == object:
                        # Inhomogeneous - handle manually
                        max_cols = max(len(l) if hasattr(l, '__len__') else 1 for l in labels)
                        labels_fixed = np.zeros((len(labels), max_cols))
                        for i, l in enumerate(labels):
                            if hasattr(l, '__len__'):
                                labels_fixed[i, :len(l)] = l[:max_cols]
                            else:
                                labels_fixed[i, 0] = l
                        labels = labels_fixed
                    else:
                        labels = labels_array
                except ValueError:
                    # Fallback for complex inhomogeneous cases
                    logger.warning("Complex inhomogeneous labels detected, using fallback")
                    labels = np.zeros((len(labels), 1))
                    for i, l in enumerate(labels):
                        try:
                            labels[i, 0] = float(l[0]) if hasattr(l, '__len__') else float(l)
                        except (ValueError, TypeError, IndexError):
                            labels[i, 0] = 0
            else:
                labels = np.asarray(labels)
                
        except Exception as e:
            logger.error(f"Array conversion failed: {e}, using fallback metrics")
            return {"error": 1.0, "binary_accuracy": 0.0, "binary_f1": 0.0}

        # Validate shapes
        if preds.ndim != 2:
            logger.warning(
                f"Unexpected predictions shape: {preds.shape}. Expected 2D array."
            )
            if preds.ndim == 1:
                preds = preds.reshape(-1, 1)

        # Split predictions: first column is binary, rest are CWE logits
        if preds.shape[1] < 2:
            logger.warning(
                "Predictions have insufficient columns. Using single column for binary classification."
            )
            binary_preds = preds
            cwe_preds = np.zeros((preds.shape[0], max(1, self.num_cwes)))
        else:
            binary_preds = preds[:, :1]  # First column is binary
            cwe_preds = preds[:, 1:]  # Rest are CWE logits

        # Handle labels robustly based on their structure
        if labels.ndim == 2 and labels.shape[1] == preds.shape[1]:
            # Labels are concatenated (binary + cwe), split accordingly
            binary_labels = labels[:, 0]
            cwe_labels = labels[:, 1:]
        elif labels.ndim == 2 and labels.shape[1] > 1:
            # Labels might be in different format, try to infer
            binary_labels = labels[:, 0]
            cwe_labels = (
                labels[:, 1:]
                if labels.shape[1] > 1
                else np.zeros((len(labels), cwe_preds.shape[1]))
            )
        elif labels.ndim == 1:
            # Only binary labels provided
            binary_labels = labels
            cwe_labels = np.zeros((len(labels), cwe_preds.shape[1]))
        else:
            logger.warning(
                f"Unexpected labels shape: {labels.shape}. Using as binary labels."
            )
            binary_labels = labels.flatten()
            cwe_labels = np.zeros((len(binary_labels), cwe_preds.shape[1]))

        # Ensure consistent types and shapes
        binary_preds = np.asarray(binary_preds).astype(np.float32)
        cwe_preds = np.asarray(cwe_preds).astype(np.float32)
        binary_labels = np.asarray(binary_labels).astype(np.int32)
        cwe_labels = np.asarray(cwe_labels).astype(np.float32)

        # Binary metrics - ensure shapes are compatible
        binary_preds_class = (1 / (1 + np.exp(-binary_preds.squeeze())) > 0.5).astype(
            int
        )
        
        # COMPREHENSIVE FIX: Ensure arrays have matching lengths
        min_len = min(len(binary_labels), len(binary_preds_class))
        if len(binary_labels) != len(binary_preds_class):
            logger.warning(
                f"Shape mismatch: binary_labels={len(binary_labels)}, binary_preds_class={len(binary_preds_class)}. "
                f"Truncating to {min_len} samples."
            )
            binary_labels = binary_labels[:min_len]
            binary_preds_class = binary_preds_class[:min_len]
        
        binary_accuracy = accuracy_score(binary_labels, binary_preds_class)
        binary_f1 = f1_score(binary_labels, binary_preds_class, zero_division=0)
        binary_precision = precision_score(
            binary_labels, binary_preds_class, zero_division=0
        )
        binary_recall = recall_score(binary_labels, binary_preds_class, zero_division=0)

        # Multi-CWE metrics - ensure shapes are compatible
        cwe_preds_class = (1 / (1 + np.exp(-cwe_preds)) > 0.5).astype(int)
        
        # COMPREHENSIVE FIX: Ensure CWE arrays have matching shapes
        if cwe_labels.shape[0] != cwe_preds_class.shape[0]:
            min_samples = min(cwe_labels.shape[0], cwe_preds_class.shape[0])
            logger.warning(
                f"CWE shape mismatch: cwe_labels={cwe_labels.shape}, cwe_preds_class={cwe_preds_class.shape}. "
                f"Truncating to {min_samples} samples."
            )
            cwe_labels = cwe_labels[:min_samples]
            cwe_preds_class = cwe_preds_class[:min_samples]
        
        if cwe_labels.shape[1] != cwe_preds_class.shape[1]:
            min_features = min(cwe_labels.shape[1], cwe_preds_class.shape[1])
            logger.warning(
                f"CWE feature mismatch: cwe_labels={cwe_labels.shape[1]}, cwe_preds_class={cwe_preds_class.shape[1]}. "
                f"Truncating to {min_features} features."
            )
            cwe_labels = cwe_labels[:, :min_features]
            cwe_preds_class = cwe_preds_class[:, :min_features]
        
        cwe_f1_micro = f1_score(
            cwe_labels, cwe_preds_class, average="micro", zero_division=0
        )
        cwe_precision_micro = precision_score(
            cwe_labels, cwe_preds_class, average="micro", zero_division=0
        )
        cwe_recall_micro = recall_score(
            cwe_labels, cwe_preds_class, average="micro", zero_division=0
        )

        metrics = {
            "binary_accuracy": binary_accuracy,
            "binary_f1": binary_f1,
            "binary_precision": binary_precision,
            "binary_recall": binary_recall,
            "cwe_f1_micro": cwe_f1_micro,
            "cwe_precision_micro": cwe_precision_micro,
            "cwe_recall_micro": cwe_recall_micro,
        }

        # Log key metrics
        logger.info(
            f"Eval metrics - Binary F1: {binary_f1:.4f}, CWE F1: {cwe_f1_micro:.4f}"
        )

        return metrics

    def train(
        self,
        train_dataset: Dataset,
        val_dataset: Dataset,
        num_cwes: int,
        output_dir: str = "models/codebert-vuln-dual-unified",
        num_epochs: int = 3,
        batch_size: int = None,  # Auto-adjust based on device
        gradient_accumulation_steps: int = None,  # Auto-adjust based on device
        learning_rate: float = 2e-5,
        warmup_ratio: float = 0.1,
    ):
        """Unified training with CPU/GPU optimizations"""
        logger.info("Starting unified training...")

        # Auto-adjust parameters based on device
        if batch_size is None:
            batch_size = 4 if self.device == "cpu" else 8

        if gradient_accumulation_steps is None:
            gradient_accumulation_steps = 4 if self.device == "cpu" else 2

        # Create output directory
        os.makedirs(output_dir, exist_ok=True)

        # Initialize model configuration
        config = DualOutputCodeBERTConfig(
            base_model_name=self.model_name,
            num_cwes=num_cwes,
            dropout_rate=0.1,
            use_gradient_checkpointing=(self.device == "cpu"),  # Enable for CPU
        )

        # Initialize model
        model = DualOutputCodeBERTModel(config)
        model.to(self.device)

        logger.info(f"Model parameters: {sum(p.numel() for p in model.parameters()):,}")

        # Training arguments with device-specific optimizations
        training_kwargs = dict(
            output_dir=output_dir,
            num_train_epochs=num_epochs,
            per_device_train_batch_size=batch_size,
            per_device_eval_batch_size=batch_size,
            gradient_accumulation_steps=gradient_accumulation_steps,
            learning_rate=learning_rate,
            weight_decay=0.01,
            warmup_ratio=warmup_ratio,
            fp16=(self.device == "cuda"),  # FP16 only for GPU
            dataloader_pin_memory=(self.device == "cuda"),  # Pin memory for GPU
            dataloader_num_workers=(
                min(4, max(1, os.cpu_count() // 2)) if self.device == "cpu" else 2
            ),  # Optimized workers for CPU/GPU
            logging_dir=f"{output_dir}/logs" if self.use_tensorboard else None,
            logging_steps=50,
            evaluation_strategy="steps",
            eval_steps=200,
            save_strategy="steps",
            save_steps=500,
            load_best_model_at_end=True,
            metric_for_best_model="binary_f1",
            greater_is_better=True,
            report_to="tensorboard" if self.use_tensorboard else None,
            remove_unused_columns=False,
            push_to_hub=False,
        )

        # ---- COMPREHENSIVE FIX: Robust TrainingArguments construction (from fix_training_issues.py) ----
        
        def get_supported_params():
            """Get parameters supported by current transformers version"""
            if hasattr(TrainingArguments, "__dataclass_fields__"):
                return set(TrainingArguments.__dataclass_fields__.keys())
            try:
                sig = inspect.signature(TrainingArguments.__init__)
                return set(sig.parameters.keys()) - {"self"}
            except Exception:
                return set()

        supported_params = get_supported_params()
        filtered_config = {k: v for k, v in training_kwargs.items() if k in supported_params}
        
        logger.info(f"✅ Using {len(filtered_config)}/{len(training_kwargs)} parameters")

        # Create TrainingArguments with error handling (EXACTLY from fix_training_issues.py)
        try:
            training_args = TrainingArguments(**filtered_config)
            logger.info("✅ TrainingArguments created successfully with modern parameters")
        except Exception as e:
            logger.error(f"❌ TrainingArguments creation failed: {e}")
            
            # Fallback to minimal configuration
            minimal_config = {
                "output_dir": output_dir,
                "num_train_epochs": num_epochs,
                "per_device_train_batch_size": batch_size,
            }
            
            # Add optional parameters if supported
            for param in ["logging_steps", "save_steps", "save_total_limit"]:
                if param in supported_params and param in training_kwargs:
                    minimal_config[param] = training_kwargs[param]
            
            training_args = TrainingArguments(**minimal_config)
            logger.warning("⚠️ Using minimal TrainingArguments configuration")
        # ---- end COMPREHENSIVE FIX ----

        logger.info(f"Training arguments configured:")
        logger.info(
            f"  - evaluation_strategy: {getattr(training_args, 'evaluation_strategy', 'NOT SET')}"
        )
        logger.info(
            f"  - save_strategy: {getattr(training_args, 'save_strategy', 'NOT SET')}"
        )
        logger.info(
            f"  - load_best_model_at_end: {getattr(training_args, 'load_best_model_at_end', 'NOT SET')}"
        )
        logger.info(
            f"  - eval_steps: {getattr(training_args, 'eval_steps', 'NOT SET')}"
        )
        logger.info(
            f"  - save_steps: {getattr(training_args, 'save_steps', 'NOT SET')}"
        )

        # COMPREHENSIVE FIX: Enhanced data collator (from CPU script + fixes)
        def enhanced_data_collator(features):
            """Enhanced data collator with comprehensive error handling and batched warning suppression"""
            if not features:
                raise ValueError("Empty features list provided to data collator")

            # Suppress batched warnings during processing
            with warnings.catch_warnings():
                warnings.filterwarnings("ignore", message=".*batched=False.*")

                try:
                    # Apply standard tokenizer padding
                    batch = self.data_collator(features)
                except Exception as e:
                    logger.error(f"Data collator failed: {e}")
                    # Fallback manual collation
                    batch = {
                        "input_ids": torch.stack([f["input_ids"] for f in features]),
                        "attention_mask": torch.stack([f["attention_mask"] for f in features]),
                    }

            # Enhanced label processing with robust error handling
            try:
                binary_labels = []
                cwe_labels = []
                
                for f in features:
                    # Handle binary labels
                    if isinstance(f.get("binary_label"), torch.Tensor):
                        binary_labels.append(f["binary_label"].clone().detach().long())
                    else:
                        # Convert to tensor if needed
                        label_val = f.get("binary_label", 0)
                        binary_labels.append(torch.tensor(int(label_val), dtype=torch.long))
                    
                    # Handle CWE labels  
                    if isinstance(f.get("cwe_labels"), torch.Tensor):
                        cwe_labels.append(f["cwe_labels"].clone().detach().float())
                    else:
                        # Handle missing or non-tensor CWE labels
                        cwe_val = f.get("cwe_labels", [])
                        if isinstance(cwe_val, (list, np.ndarray)):
                            cwe_labels.append(torch.tensor(cwe_val, dtype=torch.float))
                        else:
                            # Default CWE labels
                            num_cwes = getattr(self, 'num_cwes', 25)  # Default number
                            cwe_labels.append(torch.zeros(num_cwes, dtype=torch.float))

                # Stack labels
                batch["binary_labels"] = torch.stack(binary_labels)
                batch["cwe_labels"] = torch.stack(cwe_labels)

                # Create concatenated labels for compute_metrics (FIXED format)
                binary_labels_float = batch["binary_labels"].float()
                if len(binary_labels_float.shape) == 1:
                    binary_labels_float = binary_labels_float.unsqueeze(-1)
                batch["labels"] = torch.cat([binary_labels_float, batch["cwe_labels"]], dim=1)

            except Exception as e:
                logger.error(f"Enhanced label processing failed: {e}")
                # Minimal fallback
                batch_size = len(features)
                batch["binary_labels"] = torch.zeros(batch_size, dtype=torch.long)
                batch["cwe_labels"] = torch.zeros(batch_size, getattr(self, 'num_cwes', 25), dtype=torch.float)
                batch["labels"] = torch.zeros(batch_size, 1 + getattr(self, 'num_cwes', 25), dtype=torch.float)

            return batch

        # CPU-specific optimizations (from CPU script)
        if self.device == "cpu":
            logger.info("🔧 Applying CPU-specific optimizations...")
            # Set torch threads for CPU optimization
            torch.set_num_threads(min(4, max(1, os.cpu_count() // 2)))
            # Enable gradient checkpointing to save memory
            if hasattr(model.config, 'gradient_checkpointing'):
                model.config.gradient_checkpointing = True
                logger.info("✅ Gradient checkpointing enabled for CPU")

        # FIXED: Conditional callback setup based on evaluation strategy
        callbacks = []
        
        # Only add EarlyStoppingCallback if evaluation is properly configured
        if (hasattr(training_args, "evaluation_strategy") and 
            training_args.evaluation_strategy != "no"):
            callbacks.append(EarlyStoppingCallback(early_stopping_patience=3))
            logger.info("✅ EarlyStoppingCallback enabled")
        elif hasattr(training_args, "do_eval") and getattr(training_args, "do_eval", False):
            callbacks.append(EarlyStoppingCallback(early_stopping_patience=3))  
            logger.info("✅ EarlyStoppingCallback enabled (legacy mode)")
        else:
            logger.info("⚠️ EarlyStoppingCallback disabled - evaluation not configured")

        # Initialize trainer with comprehensive fixes
        trainer = Trainer(
            model=model,
            args=training_args,
            train_dataset=train_dataset,
            eval_dataset=val_dataset,
            data_collator=enhanced_data_collator,
            compute_metrics=self.compute_metrics,
            callbacks=callbacks,
        )

        # Train model
        logger.info("🚀 Starting training loop...")
        trainer.train()

        # Save model and tokenizer with backup protection
        logger.info("💾 Saving model...")
        
        # Create backup if model already exists
        backup_created = False
        if os.path.exists(f"{output_dir}/model.safetensors"):
            import time
            backup_dir = f"{output_dir}_backup_{int(time.time())}"
            try:
                import shutil
                shutil.copytree(output_dir, backup_dir)
                logger.info(f"📁 Created backup at {backup_dir}")
                backup_created = True
            except Exception as e:
                logger.warning(f"⚠️ Could not create backup: {e}")
        
        try:
            trainer.save_model()
            self.tokenizer.save_pretrained(output_dir)
            # Save configuration
            config.save_pretrained(output_dir)
            logger.info(f"✅ Unified model saved to {output_dir}")
            
            # Remove backup if save was successful
            if backup_created and os.path.exists(backup_dir):
                try:
                    shutil.rmtree(backup_dir)
                    logger.info("🗑️ Removed temporary backup")
                except:
                    logger.info(f"📁 Backup kept at {backup_dir}")
                    
        except Exception as e:
            logger.error(f"❌ Model save failed: {e}")
            # Restore from backup if available
            if backup_created and os.path.exists(backup_dir):
                try:
                    if os.path.exists(output_dir):
                        shutil.rmtree(output_dir)
                    shutil.move(backup_dir, output_dir)
                    logger.info(f"🔄 Restored model from backup")
                except Exception as restore_e:
                    logger.error(f"❌ Backup restore failed: {restore_e}")
            raise

        return trainer


# ----------------------
# Enhanced Inference Helper Class
# ----------------------
class VulnerabilityInference:
    """
    Enhanced inference helper for production use with CPU/GPU support
    """

    def __init__(self, model_path: str, device: Optional[str] = None):
        self.device = device or ("cuda" if torch.cuda.is_available() else "cpu")
        self.model_path = model_path

        # Load tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)

        # Load model
        self.config = DualOutputCodeBERTConfig.from_pretrained(model_path)
        self.model = DualOutputCodeBERTModel.from_pretrained(
            model_path, config=self.config
        )
        self.model.to(self.device)
        self.model.eval()

        # Load CWE mapping
        cwe_mapping_path = Path(model_path) / "cwe_mapping.pkl"
        if cwe_mapping_path.exists():
            with open(cwe_mapping_path, "rb") as f:
                mapping_data = pickle.load(f)
                self.cwe_to_idx = mapping_data["cwe_to_idx"]
                self.idx_to_cwe = mapping_data["idx_to_cwe"]
        else:
            logger.warning("CWE mapping not found")
            self.cwe_to_idx = {}
            self.idx_to_cwe = {}

        logger.info(f"Loaded inference model from {model_path} on {self.device}")

    def predict_binary(
        self, code: str, threshold: float = 0.5
    ) -> Dict[str, Union[bool, float]]:
        """Predict binary vulnerability"""
        inputs = self.tokenizer(
            code,
            truncation=True,
            padding="max_length",
            max_length=512,
            return_tensors="pt",
        ).to(self.device)

        with torch.no_grad():
            outputs = self.model(**inputs)
            # Extract binary logits from concatenated logits (first column)
            if "binary_logits" in outputs:
                binary_logits = outputs["binary_logits"]
            else:
                # Fallback to extracting from concatenated logits
                logits = outputs["logits"]
                binary_logits = logits[:, :1]
            prob = torch.sigmoid(binary_logits).cpu().item()

        return {
            "is_vulnerable": prob > threshold,
            "vulnerability_score": prob,
            "confidence": abs(prob - 0.5) * 2,  # Distance from decision boundary
        }

    def predict_cwe(
        self, code: str, threshold: float = 0.3, top_k: int = 5
    ) -> List[Dict[str, Union[str, float]]]:
        """Predict relevant CWEs"""
        inputs = self.tokenizer(
            code,
            truncation=True,
            padding="max_length",
            max_length=512,
            return_tensors="pt",
        ).to(self.device)

        with torch.no_grad():
            outputs = self.model(**inputs)
            # Extract CWE logits from concatenated logits (all columns except first)
            if "cwe_logits" in outputs:
                cwe_logits = outputs["cwe_logits"]
            else:
                # Fallback to extracting from concatenated logits
                logits = outputs["logits"]
                cwe_logits = logits[:, 1:]
            cwe_probs = torch.sigmoid(cwe_logits).cpu().numpy().flatten()

        # Get top-k CWEs above threshold
        relevant_cwes = []
        for idx, prob in enumerate(cwe_probs):
            if prob > threshold and idx in self.idx_to_cwe:
                relevant_cwes.append(
                    {
                        "cwe_id": self.idx_to_cwe[idx],
                        "probability": float(prob),
                        "confidence": float(prob),
                    }
                )

        # Sort by probability and return top-k
        relevant_cwes.sort(key=lambda x: x["probability"], reverse=True)
        return relevant_cwes[:top_k]

    def predict_combined(self, code: str) -> Dict:
        """Combined prediction for both binary and CWE"""
        binary_result = self.predict_binary(code)
        cwe_result = self.predict_cwe(code)

        return {
            "binary_prediction": binary_result,
            "cwe_predictions": cwe_result,
            "analysis_summary": {
                "total_cwes_detected": len(cwe_result),
                "vulnerability_confidence": binary_result["confidence"],
                "top_cwe": cwe_result[0]["cwe_id"] if cwe_result else None,
            },
        }


# ----------------------
# Enhanced Main Training Pipeline
# ----------------------
def main(
    force_reload: bool = False, use_small_dataset: bool = False, device: str = "auto"
):
    """Unified main training pipeline with CPU/GPU support and enhanced small dataset processing"""
    # Set seeds
    torch.manual_seed(42)
    np.random.seed(42)

    # Resolve device
    actual_device = (
        "cuda"
        if device == "auto" and torch.cuda.is_available()
        else "cpu" if device == "cpu" else device
    )
    logger.info(f"Using device: {actual_device}")
    logger.info(f"CUDA available: {torch.cuda.is_available()}")

    # Optimize CPU thread usage when using CPU
    if actual_device == "cpu":
        torch.set_num_threads(min(4, os.cpu_count()))
        logger.info(f"Set PyTorch threads to: {torch.get_num_threads()}")

    # Enhanced small dataset processing for CPU
    if use_small_dataset and actual_device == "cpu":
        logger.info("🔧 CPU Small Dataset Mode: Optimizing for quick CPU training")
        logger.info("   - Using ultra-small batch sizes (2)")
        logger.info("   - Reduced max length (256) for faster processing")
        logger.info("   - Single epoch training")
        logger.info("   - Enhanced gradient checkpointing")
        logger.info("   - Minimal logging for speed")

    # Initialize unified processor with CPU optimizations
    logger.info("=" * 60)
    logger.info("INITIALIZING UNIFIED DATA PROCESSOR")
    logger.info("=" * 60)

    # Adjust processor settings for CPU small dataset mode
    max_length = 256 if (use_small_dataset and actual_device == "cpu") else 512
    processor = UnifiedDataProcessor(
        model_name="microsoft/codebert-base",
        max_length=max_length,
        min_tokens=50,
        chunk_size=(
            128 if (use_small_dataset and actual_device == "cpu") else 256
        ),  # Smaller chunks for CPU
    )

    # Create combined dataset with lazy loading and enhanced caching
    logger.info("=" * 60)
    if force_reload:
        logger.info("CREATING COMBINED DATASET (FORCE RELOAD)")
    else:
        logger.info("CREATING COMBINED DATASET WITH ENHANCED CACHING")
    logger.info("=" * 60)

    # Adjust dataset size for quick testing - enhanced for CPU
    if use_small_dataset:
        if actual_device == "cpu":
            max_samples = 1000  # Ultra-small for CPU quick tests
            max_per_class = 500
            logger.info("🚀 CPU Quick Test Mode: Using 1K samples total")
        else:
            max_samples = 5000
            max_per_class = 2500
    else:
        max_samples = 15000
        max_per_class = 7500

    dataset = processor.create_combined_dataset(
        max_samples_per_source=max_samples,
        balance_binary=True,
        max_per_class=max_per_class,
        cache_dir="cache/processed_datasets_unified",
        force_reload=force_reload,
    )

    if len(dataset) == 0:
        logger.error("No data loaded! Please check dataset paths.")
        return

    # Define output directory and check for existing model
    output_dir = (
        f"models/codebert-vuln-dual-{'cpu' if actual_device == 'cpu' else 'gpu'}"
    )
    if use_small_dataset:
        output_dir += "-small"
    os.makedirs(output_dir, exist_ok=True)
    
    # Check if model already exists and is complete
    model_files_exist = all([
        os.path.exists(f"{output_dir}/config.json"),
        os.path.exists(f"{output_dir}/model.safetensors"),
        os.path.exists(f"{output_dir}/tokenizer.json"),
        os.path.exists(f"{output_dir}/cwe_mapping.pkl")
    ])
    
    if model_files_exist and not force_reload:
        logger.info(f"✅ EXISTING MODEL FOUND at {output_dir}")
        logger.info("📦 Preserving existing model files - skipping training")
        logger.info("🔄 Use --force-reload to retrain from scratch")
        
        # Load existing inference helper for testing
        try:
            inference = VulnerabilityInference(output_dir)
            logger.info("✅ Successfully loaded existing model for inference")
            
            # Quick test with sample code
            test_code = "int main() { char buf[10]; gets(buf); return 0; }"
            result = inference.predict_combined(test_code)
            logger.info(f"🧪 Quick test - Vulnerable: {result['binary_prediction']['is_vulnerable']}")
            logger.info(f"🧪 Score: {result['binary_prediction']['vulnerability_score']:.3f}")
            
        except Exception as e:
            logger.warning(f"⚠️ Could not test existing model: {e}")
        
        return
    
    # Save CWE mapping (ensure it exists for training)
    processor.save_cwe_mapping(f"{output_dir}/cwe_mapping.pkl")

    # Initialize unified trainer with CPU optimizations
    logger.info("=" * 60)
    logger.info("INITIALIZING UNIFIED TRAINER")
    logger.info("=" * 60)

    trainer = UnifiedTrainer(
        model_name="microsoft/codebert-base",
        max_length=max_length,
        device=device,
        use_tensorboard=(not use_small_dataset),  # Disable TB for small tests
    )

    # Prepare datasets
    logger.info("=" * 60)
    logger.info("PREPARING UNIFIED DATASETS")
    logger.info("=" * 60)

    num_cwes = len(processor.cwe_to_idx)
    train_dataset, val_dataset = trainer.prepare_datasets(dataset, num_cwes)

    # Train with unified optimizations - enhanced for CPU small dataset
    logger.info("=" * 60)
    logger.info("STARTING UNIFIED TRAINING")
    logger.info("=" * 60)

    # Adjust training parameters for dataset size and device
    if use_small_dataset:
        if actual_device == "cpu":
            epochs = 1
            batch_size = 2  # Ultra-small for CPU
            gradient_accumulation_steps = 8
            logger.info("⚡ CPU Ultra-Fast Mode: 1 epoch, batch_size=2, grad_acc=8")
        else:
            epochs = 1
            batch_size = 4
            gradient_accumulation_steps = 4
    else:
        epochs = 3

    trained_trainer = trainer.train(
        train_dataset=train_dataset,
        val_dataset=val_dataset,
        num_cwes=num_cwes,
        output_dir=output_dir,
        num_epochs=epochs,
        batch_size=batch_size if "batch_size" in locals() else None,
        gradient_accumulation_steps=(
            gradient_accumulation_steps
            if "gradient_accumulation_steps" in locals()
            else None
        ),
        learning_rate=2e-5,
        warmup_ratio=0.1,
    )

    # Final evaluation
    logger.info("=" * 60)
    logger.info("FINAL EVALUATION")
    logger.info("=" * 60)

    results = trained_trainer.evaluate()

    logger.info("🎯 UNIFIED TRAINING RESULTS:")
    for key, value in results.items():
        logger.info(f"  {key}: {value:.4f}")

    # Dataset statistics
    logger.info("=" * 60)
    logger.info("DATASET STATISTICS")
    logger.info("=" * 60)

    logger.info(f"Total samples: {len(dataset):,}")
    logger.info(f"Training samples: {len(train_dataset):,}")
    logger.info(f"Validation samples: {len(val_dataset):,}")
    logger.info(f"Number of unique CWEs: {num_cwes}")
    logger.info(f"Model saved to: {output_dir}")

    # Test inference - skip for CPU small dataset to save time
    if not (use_small_dataset and actual_device == "cpu"):
        logger.info("=" * 60)
        logger.info("TESTING UNIFIED INFERENCE")
        logger.info("=" * 60)

        try:
            inference = VulnerabilityInference(output_dir, device=actual_device)

            test_code = """
            char* get_user_input() {
                char buffer[256];
                gets(buffer);  // Vulnerable function - buffer overflow
                return buffer;
            }
            """

            result = inference.predict_combined(test_code)
            logger.info("Sample inference result:")
            logger.info(f"  Vulnerable: {result['binary_prediction']['is_vulnerable']}")
            logger.info(
                f"  Score: {result['binary_prediction']['vulnerability_score']:.3f}"
            )
            logger.info(
                f"  Top CWEs: {[cwe['cwe_id'] for cwe in result['cwe_predictions'][:3]]}"
            )

        except Exception as e:
            logger.error(f"Inference test failed: {e}")
    else:
        logger.info("⏭️ Skipping inference test for CPU small dataset mode")

    # Performance and hackathon tips
    logger.info("=" * 60)
    logger.info("HACKATHON PERFORMANCE TIPS")
    logger.info("=" * 60)

    logger.info("✅ Unified features enabled:")
    logger.info("  - Device flexibility (CPU/GPU auto-detection)")
    logger.info("  - Gradient checkpointing for CPU memory efficiency")
    logger.info("  - FP16 for GPU acceleration")
    logger.info("  - Enhanced progress tracking and validation")
    logger.info("  - TensorBoard logging for monitoring")
    logger.info("  - Optimized dataloader workers for CPU/GPU")
    logger.info("  - PyTorch thread control for CPU efficiency")
    logger.info("  - Robust TrainingArguments construction")
    logger.info("  - SequenceClassifierOutput for better HF compatibility")

    if use_small_dataset and actual_device == "cpu":
        logger.info(
            "  - CPU Small Dataset Mode: Ultra-fast training (1K samples, 1 epoch)"
        )
        logger.info("  - Reduced sequence length (256) for speed")
        logger.info("  - Minimal batch size (2) with high gradient accumulation")

    if TENSORBOARD_AVAILABLE and not use_small_dataset:
        logger.info(f"\n📊 To view training progress, run:")
        logger.info(f"  tensorboard --logdir {output_dir}/logs")

    logger.info("\n🚀 For faster training consider:")
    logger.info("  - Use GPU if available (automatic detection)")
    logger.info("  - Reduce max_length to 256 for shorter sequences")
    logger.info("  - Use smaller model like distilbert-base-uncased")
    logger.info("  - Enable torch.compile() for PyTorch 2.0+")

    logger.info("=" * 60)
    logger.info("UNIFIED TRAINING COMPLETED SUCCESSFULLY!")
    logger.info("=" * 60)

    return trained_trainer


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Train dual-output CodeBERT model (unified CPU/GPU)"
    )
    parser.add_argument(
        "--force-reload",
        action="store_true",
        help="Force reload datasets from scratch, ignoring cache",
    )
    parser.add_argument(
        "--clear-cache",
        action="store_true",
        help="Clear cached datasets before training",
    )
    parser.add_argument(
        "--small-dataset",
        action="store_true",
        help="Use smaller dataset for quick testing (5k samples, 1 epoch)",
    )
    parser.add_argument(
        "--cpu-small-dataset",
        action="store_true",
        help="Ultra-fast CPU mode: 1K samples, 1 epoch, optimized for quick CPU testing",
    )
    parser.add_argument(
        "--device",
        type=str,
        default="auto",
        choices=["auto", "cpu", "cuda"],
        help="Device to use for training (default: auto-detect)",
    )

    args = parser.parse_args()

    # Handle CPU small dataset mode
    if args.cpu_small_dataset:
        args.small_dataset = True
        args.device = "cpu"
        logger.info("🔥 CPU Small Dataset Mode Activated!")

    # Clear cache if requested
    if args.clear_cache:
        cache_dir = Path("cache/processed_datasets_unified")
        if cache_dir.exists():
            logger.info(f"Clearing cache directory: {cache_dir}")
            shutil.rmtree(cache_dir)
        else:
            logger.info("Cache directory does not exist")

    try:
        main(
            force_reload=args.force_reload,
            use_small_dataset=args.small_dataset,
            device=args.device,
        )
    except KeyboardInterrupt:
        logger.info("Training interrupted by user")
    except Exception as e:
        logger.error(f"Training failed with error: {e}")
        logger.error("Please check your dataset paths and system requirements")
        raise
