from html import escape
from typing import List, Dict, Any
import json
import time
from pathlib import Path


class HTMLReporter:
    """Enhanced HTML reporter with comprehensive dashboards and visualizations."""

    def __init__(self):
        self.template_dir = Path(__file__).parent / "templates"

    def generate_report(
        self,
        vulnerabilities: List[Dict[str, Any]],
        summary_stats: Dict[str, Any],
        output_path: str,
    ) -> None:
        """Generate comprehensive HTML report with dashboard."""

        # Generate report sections
        dashboard_html = self._generate_dashboard(summary_stats)
        vulnerabilities_table = self._generate_vulnerabilities_table(vulnerabilities)
        charts_html = self._generate_charts(summary_stats)
        details_html = self._generate_details_section(vulnerabilities)

        # Main HTML template
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeGuardian Security Report</title>
    <style>
        {self._get_css_styles()}
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <header class="header">
        <h1>🛡️ CodeGuardian Security Report</h1>
        <p class="subtitle">ML-Powered Vulnerability Analysis</p>
        <div class="timestamp">Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}</div>
    </header>

    <nav class="nav-tabs">
        <button class="tab-button active" onclick="showTab('dashboard')">📊 Dashboard</button>
        <button class="tab-button" onclick="showTab('vulnerabilities')">🔍 Vulnerabilities</button>
        <button class="tab-button" onclick="showTab('analytics')">📈 Analytics</button>
        <button class="tab-button" onclick="showTab('details')">📋 Details</button>
    </nav>

    <main class="main-content">
        <div id="dashboard" class="tab-content active">
            {dashboard_html}
        </div>
        
        <div id="vulnerabilities" class="tab-content">
            <h2>🔍 Vulnerability Findings</h2>
            {vulnerabilities_table}
        </div>
        
        <div id="analytics" class="tab-content">
            <h2>📈 Security Analytics</h2>
            {charts_html}
        </div>
        
        <div id="details" class="tab-content">
            <h2>📋 Detailed Analysis</h2>
            {details_html}
        </div>
    </main>

    <footer class="footer">
        <p>🛡️ CodeGuardian - ML-Powered Security Scanner | Generated by CodeGuardian v1.0</p>
    </footer>

    <script>
        {self._get_javascript()}
    </script>
</body>
</html>"""

        # Write to file
        Path(output_path).write_text(html_content, encoding="utf-8")

    def _generate_dashboard(self, stats: Dict[str, Any]) -> str:
        """Generate dashboard overview."""
        total_vulns = stats.get("total_vulnerabilities", 0)
        by_severity = stats.get("by_severity", {})
        by_language = stats.get("by_language", {})

        # Risk score calculation
        risk_score = self._calculate_risk_score(stats)
        risk_level, risk_color = self._get_risk_level(risk_score)

        dashboard_html = f"""
        <div class="dashboard-grid">
            <div class="metric-card">
                <div class="metric-value">{total_vulns}</div>
                <div class="metric-label">Total Vulnerabilities</div>
            </div>
            
            <div class="metric-card risk-card" style="border-left-color: {risk_color}">
                <div class="metric-value">{risk_score}</div>
                <div class="metric-label">Risk Score</div>
                <div class="risk-level {risk_level.lower()}">{risk_level}</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-value">{by_severity.get('HIGH', 0)}</div>
                <div class="metric-label">High Severity</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-value">{len(by_language)}</div>
                <div class="metric-label">Languages Scanned</div>
            </div>
        </div>
        
        <div class="summary-grid">
            <div class="summary-section">
                <h3>🎯 Severity Distribution</h3>
                <div class="severity-bars">
                    {self._generate_severity_bars(by_severity)}
                </div>
            </div>
            
            <div class="summary-section">
                <h3>🌐 Language Coverage</h3>
                <div class="language-list">
                    {self._generate_language_list(by_language)}
                </div>
            </div>
            
            <div class="summary-section">
                <h3>🚨 Top CWE Types</h3>
                <div class="cwe-list">
                    {self._generate_cwe_list(stats.get('by_cwe', {}))}
                </div>
            </div>
        </div>
        """

        return dashboard_html

    def _generate_vulnerabilities_table(
        self, vulnerabilities: List[Dict[str, Any]]
    ) -> str:
        """Generate enhanced vulnerabilities table."""
        if not vulnerabilities:
            return "<p class='no-data'>No vulnerabilities found.</p>"

        # Sort by ML score if available, then by severity
        sorted_vulns = sorted(
            vulnerabilities,
            key=lambda x: (
                x.get("ml_score", 0),
                self._severity_weight(x.get("severity", "MEDIUM")),
            ),
            reverse=True,
        )

        table_rows = []
        for i, vuln in enumerate(sorted_vulns[:100], 1):  # Limit to top 100
            severity = vuln.get("severity", "MEDIUM").upper()
            ml_score = vuln.get("ml_score", 0)
            cwe = vuln.get("cwe", "Unknown")
            file_path = vuln.get("file", "Unknown")
            line = vuln.get("line", 0)
            language = vuln.get("language", "Unknown")
            message = vuln.get("message", "No description")

            # Truncate file path for display
            display_path = (
                str(file_path)[-50:] if len(str(file_path)) > 50 else str(file_path)
            )

            table_rows.append(
                f"""
                <tr class="vuln-row severity-{severity.lower()}">
                    <td class="rank">#{i}</td>
                    <td class="severity">
                        <span class="severity-badge {severity.lower()}">{severity}</span>
                    </td>
                    <td class="cwe">{escape(cwe)}</td>
                    <td class="language">
                        <span class="language-tag">{escape(language)}</span>
                    </td>
                    <td class="location">
                        <code title="{escape(str(file_path))}">{escape(display_path)}:{line}</code>
                    </td>
                    <td class="ml-score">
                        <div class="score-bar">
                            <div class="score-fill" style="width: {ml_score * 100}%"></div>
                            <span class="score-text">{ml_score:.3f}</span>
                        </div>
                    </td>
                    <td class="message" title="{escape(message)}">
                        {escape(message[:80] + '...' if len(message) > 80 else message)}
                    </td>
                </tr>
            """
            )

        return f"""
        <div class="table-container">
            <table class="vulnerabilities-table">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Severity</th>
                        <th>CWE</th>
                        <th>Language</th>
                        <th>Location</th>
                        <th>ML Score</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    {''.join(table_rows)}
                </tbody>
            </table>
        </div>
        """

    def _generate_charts(self, stats: Dict[str, Any]) -> str:
        """Generate charts section with Chart.js visualizations."""
        by_severity = stats.get("by_severity", {})
        by_cwe = stats.get("by_cwe", {})
        by_language = stats.get("by_language", {})

        return f"""
        <div class="charts-grid">
            <div class="chart-container">
                <h3>Severity Distribution</h3>
                <canvas id="severityChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Top CWE Types</h3>
                <canvas id="cweChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Vulnerabilities by Language</h3>
                <canvas id="languageChart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>Risk Trend Analysis</h3>
                <canvas id="trendChart"></canvas>
            </div>
        </div>
        
        <script>
            // Initialize charts with data
            const severityData = {json.dumps(by_severity)};
            const cweData = {json.dumps(dict(list(by_cwe.items())[:10]))};  // Top 10 CWEs
            const languageData = {json.dumps(by_language)};
            
            initializeCharts(severityData, cweData, languageData);
        </script>
        """

    def _generate_details_section(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate detailed analysis section."""
        if not vulnerabilities:
            return "<p class='no-data'>No detailed analysis available.</p>"

        # Group by language and CWE for detailed analysis
        language_analysis = {}
        cwe_analysis = {}

        for vuln in vulnerabilities:
            lang = vuln.get("language", "Unknown")
            cwe = vuln.get("cwe", "Unknown")

            if lang not in language_analysis:
                language_analysis[lang] = {"count": 0, "high": 0, "medium": 0, "low": 0}
            language_analysis[lang]["count"] += 1
            severity = vuln.get("severity", "MEDIUM").lower()
            if severity in language_analysis[lang]:
                language_analysis[lang][severity] += 1

            if cwe not in cwe_analysis:
                cwe_analysis[cwe] = {"count": 0, "files": set()}
            cwe_analysis[cwe]["count"] += 1
            cwe_analysis[cwe]["files"].add(vuln.get("file", "Unknown"))

        # Generate detailed sections
        language_details = self._generate_language_details(language_analysis)
        cwe_details = self._generate_cwe_details(cwe_analysis)
        recommendations = self._generate_recommendations(vulnerabilities)

        return f"""
        <div class="details-grid">
            <div class="details-section">
                <h3>📊 Language-Specific Analysis</h3>
                {language_details}
            </div>
            
            <div class="details-section">
                <h3>🎯 CWE Analysis</h3>
                {cwe_details}
            </div>
            
            <div class="details-section">
                <h3>💡 Recommendations</h3>
                {recommendations}
            </div>
        </div>
        """

    def _calculate_risk_score(self, stats: Dict[str, Any]) -> int:
        """Calculate overall risk score."""
        by_severity = stats.get("by_severity", {})
        total = stats.get("total_vulnerabilities", 0)

        if total == 0:
            return 0

        # Weighted scoring
        score = (
            by_severity.get("HIGH", 0) * 10
            + by_severity.get("MEDIUM", 0) * 5
            + by_severity.get("LOW", 0) * 1
        )

        # Normalize to 0-100 scale
        max_possible = total * 10
        return min(100, int((score / max_possible) * 100)) if max_possible > 0 else 0

    def _get_risk_level(self, score: int) -> tuple:
        """Get risk level and color based on score."""
        if score >= 80:
            return "CRITICAL", "#dc3545"
        elif score >= 60:
            return "HIGH", "#fd7e14"
        elif score >= 40:
            return "MEDIUM", "#ffc107"
        elif score >= 20:
            return "LOW", "#28a745"
        else:
            return "MINIMAL", "#6c757d"

    def _severity_weight(self, severity: str) -> int:
        """Get numeric weight for severity."""
        weights = {"HIGH": 3, "MEDIUM": 2, "LOW": 1}
        return weights.get(severity.upper(), 2)

    def _generate_severity_bars(self, by_severity: Dict[str, int]) -> str:
        """Generate severity distribution bars."""
        total = sum(by_severity.values()) or 1
        bars = []

        for severity in ["HIGH", "MEDIUM", "LOW"]:
            count = by_severity.get(severity, 0)
            percentage = (count / total) * 100
            bars.append(
                f"""
                <div class="severity-bar">
                    <span class="severity-label">{severity}</span>
                    <div class="bar-container">
                        <div class="bar-fill {severity.lower()}" style="width: {percentage}%"></div>
                    </div>
                    <span class="severity-count">{count}</span>
                </div>
            """
            )

        return "".join(bars)

    def _generate_language_list(self, by_language: Dict[str, int]) -> str:
        """Generate language coverage list."""
        items = []
        for lang, count in sorted(
            by_language.items(), key=lambda x: x[1], reverse=True
        ):
            items.append(
                f"""
                <div class="language-item">
                    <span class="language-name">{escape(lang)}</span>
                    <span class="language-count">{count}</span>
                </div>
            """
            )
        return "".join(items)

    def _generate_cwe_list(self, by_cwe: Dict[str, int]) -> str:
        """Generate top CWE list."""
        items = []
        for cwe, count in sorted(by_cwe.items(), key=lambda x: x[1], reverse=True)[:5]:
            items.append(
                f"""
                <div class="cwe-item">
                    <span class="cwe-name">{escape(cwe)}</span>
                    <span class="cwe-count">{count}</span>
                </div>
            """
            )
        return "".join(items)

    def _generate_language_details(self, analysis: Dict[str, Dict]) -> str:
        """Generate detailed language analysis."""
        details = []
        for lang, data in sorted(
            analysis.items(), key=lambda x: x[1]["count"], reverse=True
        ):
            details.append(
                f"""
                <div class="analysis-item">
                    <h4>{escape(lang)}</h4>
                    <p>Total vulnerabilities: {data['count']}</p>
                    <div class="mini-severity">
                        <span class="high">High: {data.get('high', 0)}</span>
                        <span class="medium">Medium: {data.get('medium', 0)}</span>
                        <span class="low">Low: {data.get('low', 0)}</span>
                    </div>
                </div>
            """
            )
        return "".join(details)

    def _generate_cwe_details(self, analysis: Dict[str, Dict]) -> str:
        """Generate detailed CWE analysis."""
        details = []
        for cwe, data in sorted(
            analysis.items(), key=lambda x: x[1]["count"], reverse=True
        )[:10]:
            file_count = len(data["files"])
            details.append(
                f"""
                <div class="analysis-item">
                    <h4>{escape(cwe)}</h4>
                    <p>{data['count']} occurrences in {file_count} files</p>
                </div>
            """
            )
        return "".join(details)

    def _generate_recommendations(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate security recommendations."""
        recommendations = [
            "🔧 Review and fix high-severity vulnerabilities first",
            "🛡️ Implement input validation and sanitization",
            "📚 Provide security training to development teams",
            "🔄 Run regular security scans in CI/CD pipeline",
            "📖 Follow OWASP security guidelines",
        ]

        items = []
        for rec in recommendations:
            items.append(f"<div class='recommendation-item'>{rec}</div>")

        return "".join(items)

    def _get_css_styles(self) -> str:
        """Get CSS styles for the report."""
        return """
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .header h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
        .subtitle { font-size: 1.2rem; opacity: 0.9; }
        .timestamp { margin-top: 1rem; opacity: 0.8; }
        
        .nav-tabs {
            background: white;
            border-bottom: 1px solid #dee2e6;
            padding: 0 2rem;
            display: flex;
        }
        
        .tab-button {
            padding: 1rem 2rem;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 1rem;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .tab-button.active {
            border-bottom-color: #667eea;
            color: #667eea;
            font-weight: 600;
        }
        
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }
        
        .metric-card {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #667eea;
            text-align: center;
        }
        
        .metric-value {
            font-size: 3rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 0.5rem;
        }
        
        .metric-label {
            color: #666;
            font-size: 1rem;
        }
        
        .risk-level {
            margin-top: 0.5rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            color: white;
        }
        
        .risk-level.critical { background: #dc3545; }
        .risk-level.high { background: #fd7e14; }
        .risk-level.medium { background: #ffc107; color: #333; }
        .risk-level.low { background: #28a745; }
        .risk-level.minimal { background: #6c757d; }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .summary-section {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .summary-section h3 {
            margin-bottom: 1.5rem;
            color: #333;
            font-size: 1.3rem;
        }
        
        .severity-bar {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            gap: 1rem;
        }
        
        .severity-label {
            min-width: 70px;
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .bar-container {
            flex: 1;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .bar-fill {
            height: 100%;
            transition: width 0.5s ease;
        }
        
        .bar-fill.high { background: #dc3545; }
        .bar-fill.medium { background: #ffc107; }
        .bar-fill.low { background: #28a745; }
        
        .vulnerabilities-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .vulnerabilities-table th {
            background: #667eea;
            color: white;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
        }
        
        .vulnerabilities-table td {
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
        }
        
        .vuln-row:hover {
            background: #f8f9fa;
        }
        
        .severity-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            color: white;
        }
        
        .severity-badge.high { background: #dc3545; }
        .severity-badge.medium { background: #ffc107; color: #333; }
        .severity-badge.low { background: #28a745; }
        
        .language-tag {
            background: #e9ecef;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            color: #495057;
        }
        
        .score-bar {
            position: relative;
            width: 80px;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .score-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);
            transition: width 0.5s ease;
        }
        
        .score-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.7rem;
            font-weight: 600;
            color: #333;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
        }
        
        .chart-container {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .footer {
            background: #333;
            color: white;
            text-align: center;
            padding: 2rem;
            margin-top: 3rem;
        }
        
        .no-data {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 3rem;
        }
        """

    def _get_javascript(self) -> str:
        """Get JavaScript for interactive functionality."""
        return """
        function showTab(tabName) {
            // Hide all tab contents
            const contents = document.querySelectorAll('.tab-content');
            contents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all buttons
            const buttons = document.querySelectorAll('.tab-button');
            buttons.forEach(button => button.classList.remove('active'));
            
            // Show selected tab and activate button
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }
        
        function initializeCharts(severityData, cweData, languageData) {
            // Severity pie chart
            if (document.getElementById('severityChart')) {
                new Chart(document.getElementById('severityChart'), {
                    type: 'pie',
                    data: {
                        labels: Object.keys(severityData),
                        datasets: [{
                            data: Object.values(severityData),
                            backgroundColor: ['#dc3545', '#ffc107', '#28a745']
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });
            }
            
            // CWE bar chart
            if (document.getElementById('cweChart')) {
                new Chart(document.getElementById('cweChart'), {
                    type: 'bar',
                    data: {
                        labels: Object.keys(cweData),
                        datasets: [{
                            data: Object.values(cweData),
                            backgroundColor: '#667eea'
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: { beginAtZero: true }
                        }
                    }
                });
            }
            
            // Language doughnut chart
            if (document.getElementById('languageChart')) {
                new Chart(document.getElementById('languageChart'), {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(languageData),
                        datasets: [{
                            data: Object.values(languageData),
                            backgroundColor: [
                                '#667eea', '#764ba2', '#f093fb', '#f5576c',
                                '#4facfe', '#00f2fe', '#43e97b', '#38f9d7'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });
            }
        }
        """


def export_html(findings, out_path):
    """Legacy function for backward compatibility."""
    # Convert findings to vulnerability format
    vulnerabilities = []
    for f in findings:
        vuln = {
            "id": getattr(f, "id", ""),
            "language": getattr(f, "language", ""),
            "name": getattr(f, "name", ""),
            "cwe": getattr(f, "cwe", ""),
            "owasp": getattr(f, "owasp", ""),
            "severity": getattr(f, "severity", "MEDIUM"),
            "confidence": getattr(f, "confidence", 0.0),
            "file": getattr(f, "file", ""),
            "line": getattr(f, "line", 0),
            "message": getattr(f, "name", ""),
            "ml_score": getattr(f, "confidence", 0.0),
        }
        vulnerabilities.append(vuln)

    # Calculate summary stats
    summary_stats = {
        "total_vulnerabilities": len(vulnerabilities),
        "by_severity": {},
        "by_language": {},
        "by_cwe": {},
    }

    for vuln in vulnerabilities:
        severity = vuln.get("severity", "MEDIUM").upper()
        language = vuln.get("language", "Unknown")
        cwe = vuln.get("cwe", "Unknown")

        summary_stats["by_severity"][severity] = (
            summary_stats["by_severity"].get(severity, 0) + 1
        )
        summary_stats["by_language"][language] = (
            summary_stats["by_language"].get(language, 0) + 1
        )
        summary_stats["by_cwe"][cwe] = summary_stats["by_cwe"].get(cwe, 0) + 1

    # Generate report
    reporter = HTMLReporter()
    reporter.generate_report(vulnerabilities, summary_stats, str(out_path))
